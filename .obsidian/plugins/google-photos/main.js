/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@electron/remote/dist/src/renderer/callbacks-registry.js
var require_callbacks_registry = __commonJS({
  "node_modules/@electron/remote/dist/src/renderer/callbacks-registry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CallbacksRegistry = void 0;
    var CallbacksRegistry = class {
      constructor() {
        this.nextId = 0;
        this.callbacks = {};
        this.callbackIds = /* @__PURE__ */ new WeakMap();
        this.locationInfo = /* @__PURE__ */ new WeakMap();
      }
      add(callback) {
        let id = this.callbackIds.get(callback);
        if (id != null)
          return id;
        id = this.nextId += 1;
        this.callbacks[id] = callback;
        this.callbackIds.set(callback, id);
        const regexp = /at (.*)/gi;
        const stackString = new Error().stack;
        if (!stackString)
          return id;
        let filenameAndLine;
        let match;
        while ((match = regexp.exec(stackString)) !== null) {
          const location = match[1];
          if (location.includes("(native)"))
            continue;
          if (location.includes("(<anonymous>)"))
            continue;
          if (location.includes("callbacks-registry.js"))
            continue;
          if (location.includes("remote.js"))
            continue;
          if (location.includes("@electron/remote/dist"))
            continue;
          const ref = /([^/^)]*)\)?$/gi.exec(location);
          if (ref)
            filenameAndLine = ref[1];
          break;
        }
        this.locationInfo.set(callback, filenameAndLine);
        return id;
      }
      get(id) {
        return this.callbacks[id] || function() {
        };
      }
      getLocation(callback) {
        return this.locationInfo.get(callback);
      }
      apply(id, ...args) {
        return this.get(id).apply(global, ...args);
      }
      remove(id) {
        const callback = this.callbacks[id];
        if (callback) {
          this.callbackIds.delete(callback);
          delete this.callbacks[id];
        }
      }
    };
    exports.CallbacksRegistry = CallbacksRegistry;
  }
});

// node_modules/@electron/remote/dist/src/common/type-utils.js
var require_type_utils = __commonJS({
  "node_modules/@electron/remote/dist/src/common/type-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserialize = exports.serialize = exports.isSerializableObject = exports.isPromise = void 0;
    var electron_1 = require("electron");
    function isPromise(val) {
      return val && val.then && val.then instanceof Function && val.constructor && val.constructor.reject && val.constructor.reject instanceof Function && val.constructor.resolve && val.constructor.resolve instanceof Function;
    }
    exports.isPromise = isPromise;
    var serializableTypes = [
      Boolean,
      Number,
      String,
      Date,
      Error,
      RegExp,
      ArrayBuffer
    ];
    function isSerializableObject(value) {
      return value === null || ArrayBuffer.isView(value) || serializableTypes.some((type) => value instanceof type);
    }
    exports.isSerializableObject = isSerializableObject;
    var objectMap = function(source, mapper) {
      const sourceEntries = Object.entries(source);
      const targetEntries = sourceEntries.map(([key, val]) => [key, mapper(val)]);
      return Object.fromEntries(targetEntries);
    };
    function serializeNativeImage(image) {
      const representations = [];
      const scaleFactors = image.getScaleFactors();
      if (scaleFactors.length === 1) {
        const scaleFactor = scaleFactors[0];
        const size = image.getSize(scaleFactor);
        const buffer = image.toBitmap({ scaleFactor });
        representations.push({ scaleFactor, size, buffer });
      } else {
        for (const scaleFactor of scaleFactors) {
          const size = image.getSize(scaleFactor);
          const dataURL = image.toDataURL({ scaleFactor });
          representations.push({ scaleFactor, size, dataURL });
        }
      }
      return { __ELECTRON_SERIALIZED_NativeImage__: true, representations };
    }
    function deserializeNativeImage(value) {
      const image = electron_1.nativeImage.createEmpty();
      if (value.representations.length === 1) {
        const { buffer, size, scaleFactor } = value.representations[0];
        const { width, height } = size;
        image.addRepresentation({ buffer, scaleFactor, width, height });
      } else {
        for (const rep of value.representations) {
          const { dataURL, size, scaleFactor } = rep;
          const { width, height } = size;
          image.addRepresentation({ dataURL, scaleFactor, width, height });
        }
      }
      return image;
    }
    function serialize(value) {
      if (value && value.constructor && value.constructor.name === "NativeImage") {
        return serializeNativeImage(value);
      }
      if (Array.isArray(value)) {
        return value.map(serialize);
      } else if (isSerializableObject(value)) {
        return value;
      } else if (value instanceof Object) {
        return objectMap(value, serialize);
      } else {
        return value;
      }
    }
    exports.serialize = serialize;
    function deserialize(value) {
      if (value && value.__ELECTRON_SERIALIZED_NativeImage__) {
        return deserializeNativeImage(value);
      } else if (Array.isArray(value)) {
        return value.map(deserialize);
      } else if (isSerializableObject(value)) {
        return value;
      } else if (value instanceof Object) {
        return objectMap(value, deserialize);
      } else {
        return value;
      }
    }
    exports.deserialize = deserialize;
  }
});

// node_modules/@electron/remote/dist/src/common/get-electron-binding.js
var require_get_electron_binding = __commonJS({
  "node_modules/@electron/remote/dist/src/common/get-electron-binding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getElectronBinding = void 0;
    var getElectronBinding = (name) => {
      if (process._linkedBinding) {
        return process._linkedBinding("electron_common_" + name);
      } else if (process.electronBinding) {
        return process.electronBinding(name);
      } else {
        return null;
      }
    };
    exports.getElectronBinding = getElectronBinding;
  }
});

// node_modules/@electron/remote/dist/src/common/module-names.js
var require_module_names = __commonJS({
  "node_modules/@electron/remote/dist/src/common/module-names.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.browserModuleNames = exports.commonModuleNames = void 0;
    var get_electron_binding_1 = require_get_electron_binding();
    exports.commonModuleNames = [
      "clipboard",
      "nativeImage",
      "shell"
    ];
    exports.browserModuleNames = [
      "app",
      "autoUpdater",
      "BaseWindow",
      "BrowserView",
      "BrowserWindow",
      "contentTracing",
      "crashReporter",
      "dialog",
      "globalShortcut",
      "ipcMain",
      "inAppPurchase",
      "Menu",
      "MenuItem",
      "nativeTheme",
      "net",
      "netLog",
      "MessageChannelMain",
      "Notification",
      "powerMonitor",
      "powerSaveBlocker",
      "protocol",
      "pushNotifications",
      "safeStorage",
      "screen",
      "session",
      "ShareMenu",
      "systemPreferences",
      "TopLevelWindow",
      "TouchBar",
      "Tray",
      "utilityProcess",
      "View",
      "webContents",
      "WebContentsView",
      "webFrameMain"
    ].concat(exports.commonModuleNames);
    var features = get_electron_binding_1.getElectronBinding("features");
    if (!features || features.isDesktopCapturerEnabled()) {
      exports.browserModuleNames.push("desktopCapturer");
    }
    if (!features || features.isViewApiEnabled()) {
      exports.browserModuleNames.push("ImageView");
    }
  }
});

// node_modules/@electron/remote/dist/src/renderer/remote.js
var require_remote = __commonJS({
  "node_modules/@electron/remote/dist/src/renderer/remote.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFunctionWithReturnValue = exports.getGlobal = exports.getCurrentWebContents = exports.getCurrentWindow = exports.getBuiltin = void 0;
    var callbacks_registry_1 = require_callbacks_registry();
    var type_utils_1 = require_type_utils();
    var electron_1 = require("electron");
    var module_names_1 = require_module_names();
    var get_electron_binding_1 = require_get_electron_binding();
    var { Promise: Promise2 } = global;
    var callbacksRegistry = new callbacks_registry_1.CallbacksRegistry();
    var remoteObjectCache = /* @__PURE__ */ new Map();
    var finalizationRegistry = new FinalizationRegistry((id) => {
      const ref = remoteObjectCache.get(id);
      if (ref !== void 0 && ref.deref() === void 0) {
        remoteObjectCache.delete(id);
        electron_1.ipcRenderer.send("REMOTE_BROWSER_DEREFERENCE", contextId, id, 0);
      }
    });
    var electronIds = /* @__PURE__ */ new WeakMap();
    var isReturnValue = /* @__PURE__ */ new WeakSet();
    function getCachedRemoteObject(id) {
      const ref = remoteObjectCache.get(id);
      if (ref !== void 0) {
        const deref = ref.deref();
        if (deref !== void 0)
          return deref;
      }
    }
    function setCachedRemoteObject(id, value) {
      const wr = new WeakRef(value);
      remoteObjectCache.set(id, wr);
      finalizationRegistry.register(value, id);
      return value;
    }
    function getContextId() {
      const v8Util = get_electron_binding_1.getElectronBinding("v8_util");
      if (v8Util) {
        return v8Util.getHiddenValue(global, "contextId");
      } else {
        throw new Error("Electron >=v13.0.0-beta.6 required to support sandboxed renderers");
      }
    }
    var contextId = process.contextId || getContextId();
    process.on("exit", () => {
      const command = "REMOTE_BROWSER_CONTEXT_RELEASE";
      electron_1.ipcRenderer.send(command, contextId);
    });
    var IS_REMOTE_PROXY = Symbol("is-remote-proxy");
    function wrapArgs(args, visited = /* @__PURE__ */ new Set()) {
      const valueToMeta = (value) => {
        if (visited.has(value)) {
          return {
            type: "value",
            value: null
          };
        }
        if (value && value.constructor && value.constructor.name === "NativeImage") {
          return { type: "nativeimage", value: type_utils_1.serialize(value) };
        } else if (Array.isArray(value)) {
          visited.add(value);
          const meta = {
            type: "array",
            value: wrapArgs(value, visited)
          };
          visited.delete(value);
          return meta;
        } else if (value instanceof Buffer) {
          return {
            type: "buffer",
            value
          };
        } else if (type_utils_1.isSerializableObject(value)) {
          return {
            type: "value",
            value
          };
        } else if (typeof value === "object") {
          if (type_utils_1.isPromise(value)) {
            return {
              type: "promise",
              then: valueToMeta(function(onFulfilled, onRejected) {
                value.then(onFulfilled, onRejected);
              })
            };
          } else if (electronIds.has(value)) {
            return {
              type: "remote-object",
              id: electronIds.get(value)
            };
          }
          const meta = {
            type: "object",
            name: value.constructor ? value.constructor.name : "",
            members: []
          };
          visited.add(value);
          for (const prop in value) {
            meta.members.push({
              name: prop,
              value: valueToMeta(value[prop])
            });
          }
          visited.delete(value);
          return meta;
        } else if (typeof value === "function" && isReturnValue.has(value)) {
          return {
            type: "function-with-return-value",
            value: valueToMeta(value())
          };
        } else if (typeof value === "function") {
          return {
            type: "function",
            id: callbacksRegistry.add(value),
            location: callbacksRegistry.getLocation(value),
            length: value.length
          };
        } else {
          return {
            type: "value",
            value
          };
        }
      };
      return args.map(valueToMeta);
    }
    function setObjectMembers(ref, object, metaId, members) {
      if (!Array.isArray(members))
        return;
      for (const member of members) {
        if (Object.prototype.hasOwnProperty.call(object, member.name))
          continue;
        const descriptor = { enumerable: member.enumerable };
        if (member.type === "method") {
          const remoteMemberFunction = function(...args) {
            let command;
            if (this && this.constructor === remoteMemberFunction) {
              command = "REMOTE_BROWSER_MEMBER_CONSTRUCTOR";
            } else {
              command = "REMOTE_BROWSER_MEMBER_CALL";
            }
            const ret = electron_1.ipcRenderer.sendSync(command, contextId, metaId, member.name, wrapArgs(args));
            return metaToValue(ret);
          };
          let descriptorFunction = proxyFunctionProperties(remoteMemberFunction, metaId, member.name);
          descriptor.get = () => {
            descriptorFunction.ref = ref;
            return descriptorFunction;
          };
          descriptor.set = (value) => {
            descriptorFunction = value;
            return value;
          };
          descriptor.configurable = true;
        } else if (member.type === "get") {
          descriptor.get = () => {
            const command = "REMOTE_BROWSER_MEMBER_GET";
            const meta = electron_1.ipcRenderer.sendSync(command, contextId, metaId, member.name);
            return metaToValue(meta);
          };
          if (member.writable) {
            descriptor.set = (value) => {
              const args = wrapArgs([value]);
              const command = "REMOTE_BROWSER_MEMBER_SET";
              const meta = electron_1.ipcRenderer.sendSync(command, contextId, metaId, member.name, args);
              if (meta != null)
                metaToValue(meta);
              return value;
            };
          }
        }
        Object.defineProperty(object, member.name, descriptor);
      }
    }
    function setObjectPrototype(ref, object, metaId, descriptor) {
      if (descriptor === null)
        return;
      const proto = {};
      setObjectMembers(ref, proto, metaId, descriptor.members);
      setObjectPrototype(ref, proto, metaId, descriptor.proto);
      Object.setPrototypeOf(object, proto);
    }
    function proxyFunctionProperties(remoteMemberFunction, metaId, name) {
      let loaded = false;
      const loadRemoteProperties = () => {
        if (loaded)
          return;
        loaded = true;
        const command = "REMOTE_BROWSER_MEMBER_GET";
        const meta = electron_1.ipcRenderer.sendSync(command, contextId, metaId, name);
        setObjectMembers(remoteMemberFunction, remoteMemberFunction, meta.id, meta.members);
      };
      return new Proxy(remoteMemberFunction, {
        set: (target, property, value) => {
          if (property !== "ref")
            loadRemoteProperties();
          target[property] = value;
          return true;
        },
        get: (target, property) => {
          if (property === IS_REMOTE_PROXY)
            return true;
          if (!Object.prototype.hasOwnProperty.call(target, property))
            loadRemoteProperties();
          const value = target[property];
          if (property === "toString" && typeof value === "function") {
            return value.bind(target);
          }
          return value;
        },
        ownKeys: (target) => {
          loadRemoteProperties();
          return Object.getOwnPropertyNames(target);
        },
        getOwnPropertyDescriptor: (target, property) => {
          const descriptor = Object.getOwnPropertyDescriptor(target, property);
          if (descriptor)
            return descriptor;
          loadRemoteProperties();
          return Object.getOwnPropertyDescriptor(target, property);
        }
      });
    }
    function metaToValue(meta) {
      if (meta.type === "value") {
        return meta.value;
      } else if (meta.type === "array") {
        return meta.members.map((member) => metaToValue(member));
      } else if (meta.type === "nativeimage") {
        return type_utils_1.deserialize(meta.value);
      } else if (meta.type === "buffer") {
        return Buffer.from(meta.value.buffer, meta.value.byteOffset, meta.value.byteLength);
      } else if (meta.type === "promise") {
        return Promise2.resolve({ then: metaToValue(meta.then) });
      } else if (meta.type === "error") {
        return metaToError(meta);
      } else if (meta.type === "exception") {
        if (meta.value.type === "error") {
          throw metaToError(meta.value);
        } else {
          throw new Error(`Unexpected value type in exception: ${meta.value.type}`);
        }
      } else {
        let ret;
        if ("id" in meta) {
          const cached = getCachedRemoteObject(meta.id);
          if (cached !== void 0) {
            return cached;
          }
        }
        if (meta.type === "function") {
          const remoteFunction = function(...args) {
            let command;
            if (this && this.constructor === remoteFunction) {
              command = "REMOTE_BROWSER_CONSTRUCTOR";
            } else {
              command = "REMOTE_BROWSER_FUNCTION_CALL";
            }
            const obj = electron_1.ipcRenderer.sendSync(command, contextId, meta.id, wrapArgs(args));
            return metaToValue(obj);
          };
          ret = remoteFunction;
        } else {
          ret = {};
        }
        setObjectMembers(ret, ret, meta.id, meta.members);
        setObjectPrototype(ret, ret, meta.id, meta.proto);
        if (ret.constructor && ret.constructor[IS_REMOTE_PROXY]) {
          Object.defineProperty(ret.constructor, "name", { value: meta.name });
        }
        electronIds.set(ret, meta.id);
        setCachedRemoteObject(meta.id, ret);
        return ret;
      }
    }
    function metaToError(meta) {
      const obj = meta.value;
      for (const { name, value } of meta.members) {
        obj[name] = metaToValue(value);
      }
      return obj;
    }
    function handleMessage(channel, handler) {
      electron_1.ipcRenderer.on(channel, (event, passedContextId, id, ...args) => {
        if (event.senderId !== 0) {
          console.error(`Message ${channel} sent by unexpected WebContents (${event.senderId})`);
          return;
        }
        if (passedContextId === contextId) {
          handler(id, ...args);
        } else {
          electron_1.ipcRenderer.send("REMOTE_BROWSER_WRONG_CONTEXT_ERROR", contextId, passedContextId, id);
        }
      });
    }
    var enableStacks = process.argv.includes("--enable-api-filtering-logging");
    function getCurrentStack() {
      const target = { stack: void 0 };
      if (enableStacks) {
        Error.captureStackTrace(target, getCurrentStack);
      }
      return target.stack;
    }
    handleMessage("REMOTE_RENDERER_CALLBACK", (id, args) => {
      callbacksRegistry.apply(id, metaToValue(args));
    });
    handleMessage("REMOTE_RENDERER_RELEASE_CALLBACK", (id) => {
      callbacksRegistry.remove(id);
    });
    exports.require = (module3) => {
      const command = "REMOTE_BROWSER_REQUIRE";
      const meta = electron_1.ipcRenderer.sendSync(command, contextId, module3, getCurrentStack());
      return metaToValue(meta);
    };
    function getBuiltin(module3) {
      const command = "REMOTE_BROWSER_GET_BUILTIN";
      const meta = electron_1.ipcRenderer.sendSync(command, contextId, module3, getCurrentStack());
      return metaToValue(meta);
    }
    exports.getBuiltin = getBuiltin;
    function getCurrentWindow() {
      const command = "REMOTE_BROWSER_GET_CURRENT_WINDOW";
      const meta = electron_1.ipcRenderer.sendSync(command, contextId, getCurrentStack());
      return metaToValue(meta);
    }
    exports.getCurrentWindow = getCurrentWindow;
    function getCurrentWebContents() {
      const command = "REMOTE_BROWSER_GET_CURRENT_WEB_CONTENTS";
      const meta = electron_1.ipcRenderer.sendSync(command, contextId, getCurrentStack());
      return metaToValue(meta);
    }
    exports.getCurrentWebContents = getCurrentWebContents;
    function getGlobal(name) {
      const command = "REMOTE_BROWSER_GET_GLOBAL";
      const meta = electron_1.ipcRenderer.sendSync(command, contextId, name, getCurrentStack());
      return metaToValue(meta);
    }
    exports.getGlobal = getGlobal;
    Object.defineProperty(exports, "process", {
      enumerable: true,
      get: () => exports.getGlobal("process")
    });
    function createFunctionWithReturnValue(returnValue) {
      const func = () => returnValue;
      isReturnValue.add(func);
      return func;
    }
    exports.createFunctionWithReturnValue = createFunctionWithReturnValue;
    var addBuiltinProperty = (name) => {
      Object.defineProperty(exports, name, {
        enumerable: true,
        get: () => exports.getBuiltin(name)
      });
    };
    module_names_1.browserModuleNames.forEach(addBuiltinProperty);
  }
});

// node_modules/@electron/remote/dist/src/renderer/index.js
var require_renderer = __commonJS({
  "node_modules/@electron/remote/dist/src/renderer/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    if (process.type === "browser")
      throw new Error(`"@electron/remote" cannot be required in the browser process. Instead require("@electron/remote/main").`);
    __exportStar(require_remote(), exports);
  }
});

// node_modules/@electron/remote/renderer/index.js
var require_renderer2 = __commonJS({
  "node_modules/@electron/remote/renderer/index.js"(exports, module2) {
    module2.exports = require_renderer();
  }
});

// node_modules/litepicker/dist/litepicker.umd.js
var require_litepicker_umd = __commonJS({
  "node_modules/litepicker/dist/litepicker.umd.js"(exports, module2) {
    !function(t, e) {
      typeof exports == "object" && typeof module2 == "object" ? module2.exports = e() : typeof define == "function" && define.amd ? define("Litepicker", [], e) : typeof exports == "object" ? exports.Litepicker = e() : t.Litepicker = e();
    }(window, function() {
      return function(t) {
        var e = {};
        function i(n) {
          if (e[n])
            return e[n].exports;
          var o = e[n] = { i: n, l: false, exports: {} };
          return t[n].call(o.exports, o, o.exports, i), o.l = true, o.exports;
        }
        return i.m = t, i.c = e, i.d = function(t2, e2, n) {
          i.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: n });
        }, i.r = function(t2) {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
        }, i.t = function(t2, e2) {
          if (1 & e2 && (t2 = i(t2)), 8 & e2)
            return t2;
          if (4 & e2 && typeof t2 == "object" && t2 && t2.__esModule)
            return t2;
          var n = /* @__PURE__ */ Object.create(null);
          if (i.r(n), Object.defineProperty(n, "default", { enumerable: true, value: t2 }), 2 & e2 && typeof t2 != "string")
            for (var o in t2)
              i.d(n, o, function(e3) {
                return t2[e3];
              }.bind(null, o));
          return n;
        }, i.n = function(t2) {
          var e2 = t2 && t2.__esModule ? function() {
            return t2.default;
          } : function() {
            return t2;
          };
          return i.d(e2, "a", e2), e2;
        }, i.o = function(t2, e2) {
          return Object.prototype.hasOwnProperty.call(t2, e2);
        }, i.p = "", i(i.s = 4);
      }([function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var n = function() {
          function t2(e2, i2, n2) {
            e2 === void 0 && (e2 = null), i2 === void 0 && (i2 = null), n2 === void 0 && (n2 = "en-US"), this.dateInstance = typeof i2 == "object" && i2 !== null ? i2.parse(e2 instanceof t2 ? e2.clone().toJSDate() : e2) : typeof i2 == "string" ? t2.parseDateTime(e2, i2, n2) : e2 ? t2.parseDateTime(e2) : t2.parseDateTime(new Date()), this.lang = n2;
          }
          return t2.parseDateTime = function(e2, i2, n2) {
            if (i2 === void 0 && (i2 = "YYYY-MM-DD"), n2 === void 0 && (n2 = "en-US"), !e2)
              return new Date(NaN);
            if (e2 instanceof Date)
              return new Date(e2);
            if (e2 instanceof t2)
              return e2.clone().toJSDate();
            if (/^-?\d{10,}$/.test(e2))
              return t2.getDateZeroTime(new Date(Number(e2)));
            if (typeof e2 == "string") {
              for (var o = [], s = null; (s = t2.regex.exec(i2)) != null; )
                s[1] !== "\\" && o.push(s);
              if (o.length) {
                var r = { year: null, month: null, shortMonth: null, longMonth: null, day: null, value: "" };
                o[0].index > 0 && (r.value += ".*?");
                for (var a = 0, l = Object.entries(o); a < l.length; a++) {
                  var c = l[a], h = c[0], p = c[1], d = Number(h), u = t2.formatPatterns(p[0], n2), m = u.group, f = u.pattern;
                  r[m] = d + 1, r.value += f, r.value += ".*?";
                }
                var g = new RegExp("^" + r.value + "$");
                if (g.test(e2)) {
                  var v = g.exec(e2), y = Number(v[r.year]), b = null;
                  r.month ? b = Number(v[r.month]) - 1 : r.shortMonth ? b = t2.shortMonths(n2).indexOf(v[r.shortMonth]) : r.longMonth && (b = t2.longMonths(n2).indexOf(v[r.longMonth]));
                  var k = Number(v[r.day]) || 1;
                  return new Date(y, b, k, 0, 0, 0, 0);
                }
              }
            }
            return t2.getDateZeroTime(new Date(e2));
          }, t2.convertArray = function(e2, i2) {
            return e2.map(function(e3) {
              return e3 instanceof Array ? e3.map(function(e4) {
                return new t2(e4, i2);
              }) : new t2(e3, i2);
            });
          }, t2.getDateZeroTime = function(t3) {
            return new Date(t3.getFullYear(), t3.getMonth(), t3.getDate(), 0, 0, 0, 0);
          }, t2.shortMonths = function(e2) {
            return t2.MONTH_JS.map(function(t3) {
              return new Date(2019, t3).toLocaleString(e2, { month: "short" });
            });
          }, t2.longMonths = function(e2) {
            return t2.MONTH_JS.map(function(t3) {
              return new Date(2019, t3).toLocaleString(e2, { month: "long" });
            });
          }, t2.formatPatterns = function(e2, i2) {
            switch (e2) {
              case "YY":
              case "YYYY":
                return { group: "year", pattern: "(\\d{" + e2.length + "})" };
              case "M":
                return { group: "month", pattern: "(\\d{1,2})" };
              case "MM":
                return { group: "month", pattern: "(\\d{2})" };
              case "MMM":
                return { group: "shortMonth", pattern: "(" + t2.shortMonths(i2).join("|") + ")" };
              case "MMMM":
                return { group: "longMonth", pattern: "(" + t2.longMonths(i2).join("|") + ")" };
              case "D":
                return { group: "day", pattern: "(\\d{1,2})" };
              case "DD":
                return { group: "day", pattern: "(\\d{2})" };
            }
          }, t2.prototype.toJSDate = function() {
            return this.dateInstance;
          }, t2.prototype.toLocaleString = function(t3, e2) {
            return this.dateInstance.toLocaleString(t3, e2);
          }, t2.prototype.toDateString = function() {
            return this.dateInstance.toDateString();
          }, t2.prototype.getSeconds = function() {
            return this.dateInstance.getSeconds();
          }, t2.prototype.getDay = function() {
            return this.dateInstance.getDay();
          }, t2.prototype.getTime = function() {
            return this.dateInstance.getTime();
          }, t2.prototype.getDate = function() {
            return this.dateInstance.getDate();
          }, t2.prototype.getMonth = function() {
            return this.dateInstance.getMonth();
          }, t2.prototype.getFullYear = function() {
            return this.dateInstance.getFullYear();
          }, t2.prototype.setMonth = function(t3) {
            return this.dateInstance.setMonth(t3);
          }, t2.prototype.setHours = function(t3, e2, i2, n2) {
            t3 === void 0 && (t3 = 0), e2 === void 0 && (e2 = 0), i2 === void 0 && (i2 = 0), n2 === void 0 && (n2 = 0), this.dateInstance.setHours(t3, e2, i2, n2);
          }, t2.prototype.setSeconds = function(t3) {
            return this.dateInstance.setSeconds(t3);
          }, t2.prototype.setDate = function(t3) {
            return this.dateInstance.setDate(t3);
          }, t2.prototype.setFullYear = function(t3) {
            return this.dateInstance.setFullYear(t3);
          }, t2.prototype.getWeek = function(t3) {
            var e2 = new Date(this.timestamp()), i2 = (this.getDay() + (7 - t3)) % 7;
            e2.setDate(e2.getDate() - i2);
            var n2 = e2.getTime();
            return e2.setMonth(0, 1), e2.getDay() !== t3 && e2.setMonth(0, 1 + (4 - e2.getDay() + 7) % 7), 1 + Math.ceil((n2 - e2.getTime()) / 6048e5);
          }, t2.prototype.clone = function() {
            return new t2(this.toJSDate());
          }, t2.prototype.isBetween = function(t3, e2, i2) {
            switch (i2 === void 0 && (i2 = "()"), i2) {
              default:
              case "()":
                return this.timestamp() > t3.getTime() && this.timestamp() < e2.getTime();
              case "[)":
                return this.timestamp() >= t3.getTime() && this.timestamp() < e2.getTime();
              case "(]":
                return this.timestamp() > t3.getTime() && this.timestamp() <= e2.getTime();
              case "[]":
                return this.timestamp() >= t3.getTime() && this.timestamp() <= e2.getTime();
            }
          }, t2.prototype.isBefore = function(t3, e2) {
            switch (e2 === void 0 && (e2 = "seconds"), e2) {
              case "second":
              case "seconds":
                return t3.getTime() > this.getTime();
              case "day":
              case "days":
                return new Date(t3.getFullYear(), t3.getMonth(), t3.getDate()).getTime() > new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime();
              case "month":
              case "months":
                return new Date(t3.getFullYear(), t3.getMonth(), 1).getTime() > new Date(this.getFullYear(), this.getMonth(), 1).getTime();
              case "year":
              case "years":
                return t3.getFullYear() > this.getFullYear();
            }
            throw new Error("isBefore: Invalid unit!");
          }, t2.prototype.isSameOrBefore = function(t3, e2) {
            switch (e2 === void 0 && (e2 = "seconds"), e2) {
              case "second":
              case "seconds":
                return t3.getTime() >= this.getTime();
              case "day":
              case "days":
                return new Date(t3.getFullYear(), t3.getMonth(), t3.getDate()).getTime() >= new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime();
              case "month":
              case "months":
                return new Date(t3.getFullYear(), t3.getMonth(), 1).getTime() >= new Date(this.getFullYear(), this.getMonth(), 1).getTime();
            }
            throw new Error("isSameOrBefore: Invalid unit!");
          }, t2.prototype.isAfter = function(t3, e2) {
            switch (e2 === void 0 && (e2 = "seconds"), e2) {
              case "second":
              case "seconds":
                return this.getTime() > t3.getTime();
              case "day":
              case "days":
                return new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime() > new Date(t3.getFullYear(), t3.getMonth(), t3.getDate()).getTime();
              case "month":
              case "months":
                return new Date(this.getFullYear(), this.getMonth(), 1).getTime() > new Date(t3.getFullYear(), t3.getMonth(), 1).getTime();
              case "year":
              case "years":
                return this.getFullYear() > t3.getFullYear();
            }
            throw new Error("isAfter: Invalid unit!");
          }, t2.prototype.isSameOrAfter = function(t3, e2) {
            switch (e2 === void 0 && (e2 = "seconds"), e2) {
              case "second":
              case "seconds":
                return this.getTime() >= t3.getTime();
              case "day":
              case "days":
                return new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime() >= new Date(t3.getFullYear(), t3.getMonth(), t3.getDate()).getTime();
              case "month":
              case "months":
                return new Date(this.getFullYear(), this.getMonth(), 1).getTime() >= new Date(t3.getFullYear(), t3.getMonth(), 1).getTime();
            }
            throw new Error("isSameOrAfter: Invalid unit!");
          }, t2.prototype.isSame = function(t3, e2) {
            switch (e2 === void 0 && (e2 = "seconds"), e2) {
              case "second":
              case "seconds":
                return this.getTime() === t3.getTime();
              case "day":
              case "days":
                return new Date(this.getFullYear(), this.getMonth(), this.getDate()).getTime() === new Date(t3.getFullYear(), t3.getMonth(), t3.getDate()).getTime();
              case "month":
              case "months":
                return new Date(this.getFullYear(), this.getMonth(), 1).getTime() === new Date(t3.getFullYear(), t3.getMonth(), 1).getTime();
            }
            throw new Error("isSame: Invalid unit!");
          }, t2.prototype.add = function(t3, e2) {
            switch (e2 === void 0 && (e2 = "seconds"), e2) {
              case "second":
              case "seconds":
                this.setSeconds(this.getSeconds() + t3);
                break;
              case "day":
              case "days":
                this.setDate(this.getDate() + t3);
                break;
              case "month":
              case "months":
                this.setMonth(this.getMonth() + t3);
            }
            return this;
          }, t2.prototype.subtract = function(t3, e2) {
            switch (e2 === void 0 && (e2 = "seconds"), e2) {
              case "second":
              case "seconds":
                this.setSeconds(this.getSeconds() - t3);
                break;
              case "day":
              case "days":
                this.setDate(this.getDate() - t3);
                break;
              case "month":
              case "months":
                this.setMonth(this.getMonth() - t3);
            }
            return this;
          }, t2.prototype.diff = function(t3, e2) {
            e2 === void 0 && (e2 = "seconds");
            switch (e2) {
              default:
              case "second":
              case "seconds":
                return this.getTime() - t3.getTime();
              case "day":
              case "days":
                return Math.round((this.timestamp() - t3.getTime()) / 864e5);
              case "month":
              case "months":
            }
          }, t2.prototype.format = function(e2, i2) {
            if (i2 === void 0 && (i2 = "en-US"), typeof e2 == "object")
              return e2.output(this.clone().toJSDate());
            for (var n2 = "", o = [], s = null; (s = t2.regex.exec(e2)) != null; )
              s[1] !== "\\" && o.push(s);
            if (o.length) {
              o[0].index > 0 && (n2 += e2.substring(0, o[0].index));
              for (var r = 0, a = Object.entries(o); r < a.length; r++) {
                var l = a[r], c = l[0], h = l[1], p = Number(c);
                n2 += this.formatTokens(h[0], i2), o[p + 1] && (n2 += e2.substring(h.index + h[0].length, o[p + 1].index)), p === o.length - 1 && (n2 += e2.substring(h.index + h[0].length));
              }
            }
            return n2.replace(/\\/g, "");
          }, t2.prototype.timestamp = function() {
            return new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0, 0).getTime();
          }, t2.prototype.formatTokens = function(e2, i2) {
            switch (e2) {
              case "YY":
                return String(this.getFullYear()).slice(-2);
              case "YYYY":
                return String(this.getFullYear());
              case "M":
                return String(this.getMonth() + 1);
              case "MM":
                return ("0" + (this.getMonth() + 1)).slice(-2);
              case "MMM":
                return t2.shortMonths(i2)[this.getMonth()];
              case "MMMM":
                return t2.longMonths(i2)[this.getMonth()];
              case "D":
                return String(this.getDate());
              case "DD":
                return ("0" + this.getDate()).slice(-2);
              default:
                return "";
            }
          }, t2.regex = /(\\)?(Y{2,4}|M{1,4}|D{1,2}|d{1,4})/g, t2.MONTH_JS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], t2;
        }();
        e.DateTime = n;
      }, function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var i2 in e3)
              e3.hasOwnProperty(i2) && (t3[i2] = e3[i2]);
          })(t2, e2);
        }, function(t2, e2) {
          function i2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (i2.prototype = e2.prototype, new i2());
        }), s = this && this.__spreadArrays || function() {
          for (var t2 = 0, e2 = 0, i2 = arguments.length; e2 < i2; e2++)
            t2 += arguments[e2].length;
          var n2 = Array(t2), o2 = 0;
          for (e2 = 0; e2 < i2; e2++)
            for (var s2 = arguments[e2], r2 = 0, a2 = s2.length; r2 < a2; r2++, o2++)
              n2[o2] = s2[r2];
          return n2;
        };
        Object.defineProperty(e, "__esModule", { value: true });
        var r = i(5), a = i(0), l = i(3), c = i(2), h = function(t2) {
          function e2(e3) {
            var i2 = t2.call(this, e3) || this;
            return i2.preventClick = false, i2.bindEvents(), i2;
          }
          return o(e2, t2), e2.prototype.scrollToDate = function(t3) {
            if (this.options.scrollToDate) {
              var e3 = this.options.startDate instanceof a.DateTime ? this.options.startDate.clone() : null, i2 = this.options.endDate instanceof a.DateTime ? this.options.endDate.clone() : null;
              !this.options.startDate || t3 && t3 !== this.options.element ? t3 && this.options.endDate && t3 === this.options.elementEnd && (i2.setDate(1), this.options.numberOfMonths > 1 && i2.isAfter(e3) && i2.setMonth(i2.getMonth() - (this.options.numberOfMonths - 1)), this.calendars[0] = i2.clone()) : (e3.setDate(1), this.calendars[0] = e3.clone());
            }
          }, e2.prototype.bindEvents = function() {
            document.addEventListener("click", this.onClick.bind(this), true), this.ui = document.createElement("div"), this.ui.className = l.litepicker, this.ui.style.display = "none", this.ui.addEventListener("mouseenter", this.onMouseEnter.bind(this), true), this.ui.addEventListener("mouseleave", this.onMouseLeave.bind(this), false), this.options.autoRefresh ? (this.options.element instanceof HTMLElement && this.options.element.addEventListener("keyup", this.onInput.bind(this), true), this.options.elementEnd instanceof HTMLElement && this.options.elementEnd.addEventListener("keyup", this.onInput.bind(this), true)) : (this.options.element instanceof HTMLElement && this.options.element.addEventListener("change", this.onInput.bind(this), true), this.options.elementEnd instanceof HTMLElement && this.options.elementEnd.addEventListener("change", this.onInput.bind(this), true)), this.options.parentEl ? this.options.parentEl instanceof HTMLElement ? this.options.parentEl.appendChild(this.ui) : document.querySelector(this.options.parentEl).appendChild(this.ui) : this.options.inlineMode ? this.options.element instanceof HTMLInputElement ? this.options.element.parentNode.appendChild(this.ui) : this.options.element.appendChild(this.ui) : document.body.appendChild(this.ui), this.updateInput(), this.init(), typeof this.options.setup == "function" && this.options.setup.call(this, this), this.render(), this.options.inlineMode && this.show();
          }, e2.prototype.updateInput = function() {
            if (this.options.element instanceof HTMLInputElement) {
              var t3 = this.options.startDate, e3 = this.options.endDate;
              if (this.options.singleMode && t3)
                this.options.element.value = t3.format(this.options.format, this.options.lang);
              else if (!this.options.singleMode && t3 && e3) {
                var i2 = t3.format(this.options.format, this.options.lang), n2 = e3.format(this.options.format, this.options.lang);
                this.options.elementEnd instanceof HTMLInputElement ? (this.options.element.value = i2, this.options.elementEnd.value = n2) : this.options.element.value = "" + i2 + this.options.delimiter + n2;
              }
              t3 || e3 || (this.options.element.value = "", this.options.elementEnd instanceof HTMLInputElement && (this.options.elementEnd.value = ""));
            }
          }, e2.prototype.isSamePicker = function(t3) {
            return t3.closest("." + l.litepicker) === this.ui;
          }, e2.prototype.shouldShown = function(t3) {
            return !t3.disabled && (t3 === this.options.element || this.options.elementEnd && t3 === this.options.elementEnd);
          }, e2.prototype.shouldResetDatePicked = function() {
            return this.options.singleMode || this.datePicked.length === 2;
          }, e2.prototype.shouldSwapDatePicked = function() {
            return this.datePicked.length === 2 && this.datePicked[0].getTime() > this.datePicked[1].getTime();
          }, e2.prototype.shouldCheckLockDays = function() {
            return this.options.disallowLockDaysInRange && this.datePicked.length === 2;
          }, e2.prototype.onClick = function(t3) {
            var e3 = t3.target;
            if (t3.target.shadowRoot && (e3 = t3.composedPath()[0]), e3 && this.ui)
              if (this.shouldShown(e3))
                this.show(e3);
              else if (e3.closest("." + l.litepicker) || !this.isShowning()) {
                if (this.isSamePicker(e3))
                  if (this.emit("before:click", e3), this.preventClick)
                    this.preventClick = false;
                  else {
                    if (e3.classList.contains(l.dayItem)) {
                      if (t3.preventDefault(), e3.classList.contains(l.isLocked))
                        return;
                      if (this.shouldResetDatePicked() && (this.datePicked.length = 0), this.datePicked[this.datePicked.length] = new a.DateTime(e3.dataset.time), this.shouldSwapDatePicked()) {
                        var i2 = this.datePicked[1].clone();
                        this.datePicked[1] = this.datePicked[0].clone(), this.datePicked[0] = i2.clone();
                      }
                      if (this.shouldCheckLockDays())
                        c.rangeIsLocked(this.datePicked, this.options) && (this.emit("error:range", this.datePicked), this.datePicked.length = 0);
                      return this.render(), this.emit.apply(this, s(["preselect"], s(this.datePicked).map(function(t4) {
                        return t4.clone();
                      }))), void (this.options.autoApply && (this.options.singleMode && this.datePicked.length ? (this.setDate(this.datePicked[0]), this.hide()) : this.options.singleMode || this.datePicked.length !== 2 || (this.setDateRange(this.datePicked[0], this.datePicked[1]), this.hide())));
                    }
                    if (e3.classList.contains(l.buttonPreviousMonth)) {
                      t3.preventDefault();
                      var n2 = 0, o2 = this.options.switchingMonths || this.options.numberOfMonths;
                      if (this.options.splitView) {
                        var r2 = e3.closest("." + l.monthItem);
                        n2 = c.findNestedMonthItem(r2), o2 = 1;
                      }
                      return this.calendars[n2].setMonth(this.calendars[n2].getMonth() - o2), this.gotoDate(this.calendars[n2], n2), void this.emit("change:month", this.calendars[n2], n2);
                    }
                    if (e3.classList.contains(l.buttonNextMonth)) {
                      t3.preventDefault();
                      n2 = 0, o2 = this.options.switchingMonths || this.options.numberOfMonths;
                      if (this.options.splitView) {
                        r2 = e3.closest("." + l.monthItem);
                        n2 = c.findNestedMonthItem(r2), o2 = 1;
                      }
                      return this.calendars[n2].setMonth(this.calendars[n2].getMonth() + o2), this.gotoDate(this.calendars[n2], n2), void this.emit("change:month", this.calendars[n2], n2);
                    }
                    e3.classList.contains(l.buttonCancel) && (t3.preventDefault(), this.hide(), this.emit("button:cancel")), e3.classList.contains(l.buttonApply) && (t3.preventDefault(), this.options.singleMode && this.datePicked.length ? this.setDate(this.datePicked[0]) : this.options.singleMode || this.datePicked.length !== 2 || this.setDateRange(this.datePicked[0], this.datePicked[1]), this.hide(), this.emit("button:apply", this.options.startDate, this.options.endDate));
                  }
              } else
                this.hide();
          }, e2.prototype.showTooltip = function(t3, e3) {
            var i2 = this.ui.querySelector("." + l.containerTooltip);
            i2.style.visibility = "visible", i2.innerHTML = e3;
            var n2 = this.ui.getBoundingClientRect(), o2 = i2.getBoundingClientRect(), s2 = t3.getBoundingClientRect(), r2 = s2.top, a2 = s2.left;
            if (this.options.inlineMode && this.options.parentEl) {
              var c2 = this.ui.parentNode.getBoundingClientRect();
              r2 -= c2.top, a2 -= c2.left;
            } else
              r2 -= n2.top, a2 -= n2.left;
            r2 -= o2.height, a2 -= o2.width / 2, a2 += s2.width / 2, i2.style.top = r2 + "px", i2.style.left = a2 + "px", this.emit("tooltip", i2, t3);
          }, e2.prototype.hideTooltip = function() {
            this.ui.querySelector("." + l.containerTooltip).style.visibility = "hidden";
          }, e2.prototype.shouldAllowMouseEnter = function(t3) {
            return !this.options.singleMode && !t3.classList.contains(l.isLocked);
          }, e2.prototype.shouldAllowRepick = function() {
            return this.options.elementEnd && this.options.allowRepick && this.options.startDate && this.options.endDate;
          }, e2.prototype.isDayItem = function(t3) {
            return t3.classList.contains(l.dayItem);
          }, e2.prototype.onMouseEnter = function(t3) {
            var e3 = this, i2 = t3.target;
            if (this.isDayItem(i2) && this.shouldAllowMouseEnter(i2)) {
              if (this.shouldAllowRepick() && (this.triggerElement === this.options.element ? this.datePicked[0] = this.options.endDate.clone() : this.triggerElement === this.options.elementEnd && (this.datePicked[0] = this.options.startDate.clone())), this.datePicked.length !== 1)
                return;
              var n2 = this.ui.querySelector("." + l.dayItem + '[data-time="' + this.datePicked[0].getTime() + '"]'), o2 = this.datePicked[0].clone(), s2 = new a.DateTime(i2.dataset.time), r2 = false;
              if (o2.getTime() > s2.getTime()) {
                var c2 = o2.clone();
                o2 = s2.clone(), s2 = c2.clone(), r2 = true;
              }
              if (Array.prototype.slice.call(this.ui.querySelectorAll("." + l.dayItem)).forEach(function(t4) {
                var i3 = new a.DateTime(t4.dataset.time), n3 = e3.renderDay(i3);
                i3.isBetween(o2, s2) && n3.classList.add(l.isInRange), t4.className = n3.className;
              }), i2.classList.add(l.isEndDate), r2 ? (n2 && n2.classList.add(l.isFlipped), i2.classList.add(l.isFlipped)) : (n2 && n2.classList.remove(l.isFlipped), i2.classList.remove(l.isFlipped)), this.options.showTooltip) {
                var h2 = s2.diff(o2, "day") + 1;
                if (typeof this.options.tooltipNumber == "function" && (h2 = this.options.tooltipNumber.call(this, h2)), h2 > 0) {
                  var p = this.pluralSelector(h2), d = h2 + " " + (this.options.tooltipText[p] ? this.options.tooltipText[p] : "[" + p + "]");
                  this.showTooltip(i2, d);
                  var u = window.navigator.userAgent, m = /(iphone|ipad)/i.test(u), f = /OS 1([0-2])/i.test(u);
                  m && f && i2.dispatchEvent(new Event("click"));
                } else
                  this.hideTooltip();
              }
            }
          }, e2.prototype.onMouseLeave = function(t3) {
            t3.target;
            this.options.allowRepick && (!this.options.allowRepick || this.options.startDate || this.options.endDate) && (this.datePicked.length = 0, this.render());
          }, e2.prototype.onInput = function(t3) {
            var e3 = this.parseInput(), i2 = e3[0], n2 = e3[1], o2 = this.options.format;
            if (this.options.elementEnd ? i2 instanceof a.DateTime && n2 instanceof a.DateTime && i2.format(o2) === this.options.element.value && n2.format(o2) === this.options.elementEnd.value : this.options.singleMode ? i2 instanceof a.DateTime && i2.format(o2) === this.options.element.value : i2 instanceof a.DateTime && n2 instanceof a.DateTime && "" + i2.format(o2) + this.options.delimiter + n2.format(o2) === this.options.element.value) {
              if (n2 && i2.getTime() > n2.getTime()) {
                var s2 = i2.clone();
                i2 = n2.clone(), n2 = s2.clone();
              }
              this.options.startDate = new a.DateTime(i2, this.options.format, this.options.lang), n2 && (this.options.endDate = new a.DateTime(n2, this.options.format, this.options.lang)), this.updateInput(), this.render();
              var r2 = i2.clone(), l2 = 0;
              (this.options.elementEnd ? i2.format(o2) === t3.target.value : t3.target.value.startsWith(i2.format(o2))) || (r2 = n2.clone(), l2 = this.options.numberOfMonths - 1), this.emit("selected", this.getStartDate(), this.getEndDate()), this.gotoDate(r2, l2);
            }
          }, e2;
        }(r.Calendar);
        e.Litepicker = h;
      }, function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.findNestedMonthItem = function(t2) {
          for (var e2 = t2.parentNode.childNodes, i2 = 0; i2 < e2.length; i2 += 1) {
            if (e2.item(i2) === t2)
              return i2;
          }
          return 0;
        }, e.dateIsLocked = function(t2, e2, i2) {
          var n = false;
          return e2.lockDays.length && (n = e2.lockDays.filter(function(i3) {
            return i3 instanceof Array ? t2.isBetween(i3[0], i3[1], e2.lockDaysInclusivity) : i3.isSame(t2, "day");
          }).length), n || typeof e2.lockDaysFilter != "function" || (n = e2.lockDaysFilter.call(this, t2.clone(), null, i2)), n;
        }, e.rangeIsLocked = function(t2, e2) {
          var i2 = false;
          return e2.lockDays.length && (i2 = e2.lockDays.filter(function(i3) {
            if (i3 instanceof Array) {
              var n = t2[0].toDateString() === i3[0].toDateString() && t2[1].toDateString() === i3[1].toDateString();
              return i3[0].isBetween(t2[0], t2[1], e2.lockDaysInclusivity) || i3[1].isBetween(t2[0], t2[1], e2.lockDaysInclusivity) || n;
            }
            return i3.isBetween(t2[0], t2[1], e2.lockDaysInclusivity);
          }).length), i2 || typeof e2.lockDaysFilter != "function" || (i2 = e2.lockDaysFilter.call(this, t2[0].clone(), t2[1].clone(), t2)), i2;
        };
      }, function(t, e, i) {
        var n = i(8);
        typeof n == "string" && (n = [[t.i, n, ""]]);
        var o = { insert: function(t2) {
          var e2 = document.querySelector("head"), i2 = window._lastElementInsertedByStyleLoader;
          window.disableLitepickerStyles || (i2 ? i2.nextSibling ? e2.insertBefore(t2, i2.nextSibling) : e2.appendChild(t2) : e2.insertBefore(t2, e2.firstChild), window._lastElementInsertedByStyleLoader = t2);
        }, singleton: false };
        i(10)(n, o);
        n.locals && (t.exports = n.locals);
      }, function(t, e, i) {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true });
        var n = i(1);
        e.Litepicker = n.Litepicker, i(11), window.Litepicker = n.Litepicker, e.default = n.Litepicker;
      }, function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var i2 in e3)
              e3.hasOwnProperty(i2) && (t3[i2] = e3[i2]);
          })(t2, e2);
        }, function(t2, e2) {
          function i2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (i2.prototype = e2.prototype, new i2());
        });
        Object.defineProperty(e, "__esModule", { value: true });
        var s = i(6), r = i(0), a = i(3), l = i(2), c = function(t2) {
          function e2(e3) {
            return t2.call(this, e3) || this;
          }
          return o(e2, t2), e2.prototype.render = function() {
            var t3 = this;
            this.emit("before:render", this.ui);
            var e3 = document.createElement("div");
            e3.className = a.containerMain;
            var i2 = document.createElement("div");
            i2.className = a.containerMonths, a["columns" + this.options.numberOfColumns] && (i2.classList.remove(a.columns2, a.columns3, a.columns4), i2.classList.add(a["columns" + this.options.numberOfColumns])), this.options.splitView && i2.classList.add(a.splitView), this.options.showWeekNumbers && i2.classList.add(a.showWeekNumbers);
            for (var n2 = this.calendars[0].clone(), o2 = n2.getMonth(), s2 = n2.getMonth() + this.options.numberOfMonths, r2 = 0, l2 = o2; l2 < s2; l2 += 1) {
              var c2 = n2.clone();
              c2.setDate(1), c2.setHours(0, 0, 0, 0), this.options.splitView ? c2 = this.calendars[r2].clone() : c2.setMonth(l2), i2.appendChild(this.renderMonth(c2, r2)), r2 += 1;
            }
            if (this.ui.innerHTML = "", e3.appendChild(i2), this.options.resetButton) {
              var h = void 0;
              typeof this.options.resetButton == "function" ? h = this.options.resetButton.call(this) : ((h = document.createElement("button")).type = "button", h.className = a.resetButton, h.innerHTML = this.options.buttonText.reset), h.addEventListener("click", function(e4) {
                e4.preventDefault(), t3.clearSelection();
              }), e3.querySelector("." + a.monthItem + ":last-child").querySelector("." + a.monthItemHeader).appendChild(h);
            }
            this.ui.appendChild(e3), this.options.autoApply && !this.options.footerHTML || this.ui.appendChild(this.renderFooter()), this.options.showTooltip && this.ui.appendChild(this.renderTooltip()), this.ui.dataset.plugins = (this.options.plugins || []).join("|"), this.emit("render", this.ui);
          }, e2.prototype.renderMonth = function(t3, e3) {
            var i2 = this, n2 = t3.clone(), o2 = 32 - new Date(n2.getFullYear(), n2.getMonth(), 32).getDate(), s2 = document.createElement("div");
            s2.className = a.monthItem;
            var c2 = document.createElement("div");
            c2.className = a.monthItemHeader;
            var h = document.createElement("div");
            if (this.options.dropdowns.months) {
              var p = document.createElement("select");
              p.className = a.monthItemName;
              for (var d = 0; d < 12; d += 1) {
                var u = document.createElement("option"), m = new r.DateTime(new Date(t3.getFullYear(), d, 2, 0, 0, 0)), f = new r.DateTime(new Date(t3.getFullYear(), d, 1, 0, 0, 0));
                u.value = String(d), u.text = m.toLocaleString(this.options.lang, { month: "long" }), u.disabled = this.options.minDate && f.isBefore(new r.DateTime(this.options.minDate), "month") || this.options.maxDate && f.isAfter(new r.DateTime(this.options.maxDate), "month"), u.selected = f.getMonth() === t3.getMonth(), p.appendChild(u);
              }
              p.addEventListener("change", function(t4) {
                var e4 = t4.target, n3 = 0;
                if (i2.options.splitView) {
                  var o3 = e4.closest("." + a.monthItem);
                  n3 = l.findNestedMonthItem(o3);
                }
                i2.calendars[n3].setMonth(Number(e4.value)), i2.render(), i2.emit("change:month", i2.calendars[n3], n3, t4);
              }), h.appendChild(p);
            } else {
              (m = document.createElement("strong")).className = a.monthItemName, m.innerHTML = t3.toLocaleString(this.options.lang, { month: "long" }), h.appendChild(m);
            }
            if (this.options.dropdowns.years) {
              var g = document.createElement("select");
              g.className = a.monthItemYear;
              var v = this.options.dropdowns.minYear, y = this.options.dropdowns.maxYear ? this.options.dropdowns.maxYear : new Date().getFullYear();
              if (t3.getFullYear() > y)
                (u = document.createElement("option")).value = String(t3.getFullYear()), u.text = String(t3.getFullYear()), u.selected = true, u.disabled = true, g.appendChild(u);
              for (d = y; d >= v; d -= 1) {
                var u = document.createElement("option"), b = new r.DateTime(new Date(d, 0, 1, 0, 0, 0));
                u.value = String(d), u.text = String(d), u.disabled = this.options.minDate && b.isBefore(new r.DateTime(this.options.minDate), "year") || this.options.maxDate && b.isAfter(new r.DateTime(this.options.maxDate), "year"), u.selected = t3.getFullYear() === d, g.appendChild(u);
              }
              if (t3.getFullYear() < v)
                (u = document.createElement("option")).value = String(t3.getFullYear()), u.text = String(t3.getFullYear()), u.selected = true, u.disabled = true, g.appendChild(u);
              if (this.options.dropdowns.years === "asc") {
                var k = Array.prototype.slice.call(g.childNodes).reverse();
                g.innerHTML = "", k.forEach(function(t4) {
                  t4.innerHTML = t4.value, g.appendChild(t4);
                });
              }
              g.addEventListener("change", function(t4) {
                var e4 = t4.target, n3 = 0;
                if (i2.options.splitView) {
                  var o3 = e4.closest("." + a.monthItem);
                  n3 = l.findNestedMonthItem(o3);
                }
                i2.calendars[n3].setFullYear(Number(e4.value)), i2.render(), i2.emit("change:year", i2.calendars[n3], n3, t4);
              }), h.appendChild(g);
            } else {
              var w = document.createElement("span");
              w.className = a.monthItemYear, w.innerHTML = String(t3.getFullYear()), h.appendChild(w);
            }
            var D = document.createElement("button");
            D.type = "button", D.className = a.buttonPreviousMonth, D.innerHTML = this.options.buttonText.previousMonth;
            var x = document.createElement("button");
            x.type = "button", x.className = a.buttonNextMonth, x.innerHTML = this.options.buttonText.nextMonth, c2.appendChild(D), c2.appendChild(h), c2.appendChild(x), this.options.minDate && n2.isSameOrBefore(new r.DateTime(this.options.minDate), "month") && s2.classList.add(a.noPreviousMonth), this.options.maxDate && n2.isSameOrAfter(new r.DateTime(this.options.maxDate), "month") && s2.classList.add(a.noNextMonth);
            var M = document.createElement("div");
            M.className = a.monthItemWeekdaysRow, this.options.showWeekNumbers && (M.innerHTML = "<div>W</div>");
            for (var _ = 1; _ <= 7; _ += 1) {
              var T = 3 + this.options.firstDay + _, L = document.createElement("div");
              L.innerHTML = this.weekdayName(T), L.title = this.weekdayName(T, "long"), M.appendChild(L);
            }
            var E = document.createElement("div");
            E.className = a.containerDays;
            var S = this.calcSkipDays(n2);
            this.options.showWeekNumbers && S && E.appendChild(this.renderWeekNumber(n2));
            for (var I = 0; I < S; I += 1) {
              var P = document.createElement("div");
              E.appendChild(P);
            }
            for (I = 1; I <= o2; I += 1)
              n2.setDate(I), this.options.showWeekNumbers && n2.getDay() === this.options.firstDay && E.appendChild(this.renderWeekNumber(n2)), E.appendChild(this.renderDay(n2));
            return s2.appendChild(c2), s2.appendChild(M), s2.appendChild(E), this.emit("render:month", s2, t3), s2;
          }, e2.prototype.renderDay = function(t3) {
            t3.setHours();
            var e3 = document.createElement("div");
            if (e3.className = a.dayItem, e3.innerHTML = String(t3.getDate()), e3.dataset.time = String(t3.getTime()), t3.toDateString() === new Date().toDateString() && e3.classList.add(a.isToday), this.datePicked.length)
              this.datePicked[0].toDateString() === t3.toDateString() && (e3.classList.add(a.isStartDate), this.options.singleMode && e3.classList.add(a.isEndDate)), this.datePicked.length === 2 && this.datePicked[1].toDateString() === t3.toDateString() && e3.classList.add(a.isEndDate), this.datePicked.length === 2 && t3.isBetween(this.datePicked[0], this.datePicked[1]) && e3.classList.add(a.isInRange);
            else if (this.options.startDate) {
              var i2 = this.options.startDate, n2 = this.options.endDate;
              i2.toDateString() === t3.toDateString() && (e3.classList.add(a.isStartDate), this.options.singleMode && e3.classList.add(a.isEndDate)), n2 && n2.toDateString() === t3.toDateString() && e3.classList.add(a.isEndDate), i2 && n2 && t3.isBetween(i2, n2) && e3.classList.add(a.isInRange);
            }
            if (this.options.minDate && t3.isBefore(new r.DateTime(this.options.minDate)) && e3.classList.add(a.isLocked), this.options.maxDate && t3.isAfter(new r.DateTime(this.options.maxDate)) && e3.classList.add(a.isLocked), this.options.minDays > 1 && this.datePicked.length === 1) {
              var o2 = this.options.minDays - 1, s2 = this.datePicked[0].clone().subtract(o2, "day"), c2 = this.datePicked[0].clone().add(o2, "day");
              t3.isBetween(s2, this.datePicked[0], "(]") && e3.classList.add(a.isLocked), t3.isBetween(this.datePicked[0], c2, "[)") && e3.classList.add(a.isLocked);
            }
            if (this.options.maxDays && this.datePicked.length === 1) {
              var h = this.options.maxDays;
              s2 = this.datePicked[0].clone().subtract(h, "day"), c2 = this.datePicked[0].clone().add(h, "day");
              t3.isSameOrBefore(s2) && e3.classList.add(a.isLocked), t3.isSameOrAfter(c2) && e3.classList.add(a.isLocked);
            }
            (this.options.selectForward && this.datePicked.length === 1 && t3.isBefore(this.datePicked[0]) && e3.classList.add(a.isLocked), this.options.selectBackward && this.datePicked.length === 1 && t3.isAfter(this.datePicked[0]) && e3.classList.add(a.isLocked), l.dateIsLocked(t3, this.options, this.datePicked) && e3.classList.add(a.isLocked), this.options.highlightedDays.length) && (this.options.highlightedDays.filter(function(e4) {
              return e4 instanceof Array ? t3.isBetween(e4[0], e4[1], "[]") : e4.isSame(t3, "day");
            }).length && e3.classList.add(a.isHighlighted));
            return e3.tabIndex = e3.classList.contains("is-locked") ? -1 : 0, this.emit("render:day", e3, t3), e3;
          }, e2.prototype.renderFooter = function() {
            var t3 = document.createElement("div");
            if (t3.className = a.containerFooter, this.options.footerHTML ? t3.innerHTML = this.options.footerHTML : t3.innerHTML = '\n      <span class="' + a.previewDateRange + '"></span>\n      <button type="button" class="' + a.buttonCancel + '">' + this.options.buttonText.cancel + '</button>\n      <button type="button" class="' + a.buttonApply + '">' + this.options.buttonText.apply + "</button>\n      ", this.options.singleMode) {
              if (this.datePicked.length === 1) {
                var e3 = this.datePicked[0].format(this.options.format, this.options.lang);
                t3.querySelector("." + a.previewDateRange).innerHTML = e3;
              }
            } else if (this.datePicked.length === 1 && t3.querySelector("." + a.buttonApply).setAttribute("disabled", ""), this.datePicked.length === 2) {
              e3 = this.datePicked[0].format(this.options.format, this.options.lang);
              var i2 = this.datePicked[1].format(this.options.format, this.options.lang);
              t3.querySelector("." + a.previewDateRange).innerHTML = "" + e3 + this.options.delimiter + i2;
            }
            return this.emit("render:footer", t3), t3;
          }, e2.prototype.renderWeekNumber = function(t3) {
            var e3 = document.createElement("div"), i2 = t3.getWeek(this.options.firstDay);
            return e3.className = a.weekNumber, e3.innerHTML = i2 === 53 && t3.getMonth() === 0 ? "53 / 1" : i2, e3;
          }, e2.prototype.renderTooltip = function() {
            var t3 = document.createElement("div");
            return t3.className = a.containerTooltip, t3;
          }, e2.prototype.weekdayName = function(t3, e3) {
            return e3 === void 0 && (e3 = "short"), new Date(1970, 0, t3, 12, 0, 0, 0).toLocaleString(this.options.lang, { weekday: e3 });
          }, e2.prototype.calcSkipDays = function(t3) {
            var e3 = t3.getDay() - this.options.firstDay;
            return e3 < 0 && (e3 += 7), e3;
          }, e2;
        }(s.LPCore);
        e.Calendar = c;
      }, function(t, e, i) {
        "use strict";
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var i2 in e3)
              e3.hasOwnProperty(i2) && (t3[i2] = e3[i2]);
          })(t2, e2);
        }, function(t2, e2) {
          function i2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = e2 === null ? Object.create(e2) : (i2.prototype = e2.prototype, new i2());
        }), s = this && this.__assign || function() {
          return (s = Object.assign || function(t2) {
            for (var e2, i2 = 1, n2 = arguments.length; i2 < n2; i2++)
              for (var o2 in e2 = arguments[i2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }).apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true });
        var r = i(7), a = i(0), l = i(1), c = function(t2) {
          function e2(e3) {
            var i2 = t2.call(this) || this;
            i2.datePicked = [], i2.calendars = [], i2.options = { element: null, elementEnd: null, parentEl: null, firstDay: 1, format: "YYYY-MM-DD", lang: "en-US", delimiter: " - ", numberOfMonths: 1, numberOfColumns: 1, startDate: null, endDate: null, zIndex: 9999, position: "auto", selectForward: false, selectBackward: false, splitView: false, inlineMode: false, singleMode: true, autoApply: true, allowRepick: false, showWeekNumbers: false, showTooltip: true, scrollToDate: true, mobileFriendly: true, resetButton: false, autoRefresh: false, lockDaysFormat: "YYYY-MM-DD", lockDays: [], disallowLockDaysInRange: false, lockDaysInclusivity: "[]", highlightedDaysFormat: "YYYY-MM-DD", highlightedDays: [], dropdowns: { minYear: 1990, maxYear: null, months: false, years: false }, buttonText: { apply: "Apply", cancel: "Cancel", previousMonth: '<svg width="11" height="16" xmlns="http://www.w3.org/2000/svg"><path d="M7.919 0l2.748 2.667L5.333 8l5.334 5.333L7.919 16 0 8z" fill-rule="nonzero"/></svg>', nextMonth: '<svg width="11" height="16" xmlns="http://www.w3.org/2000/svg"><path d="M2.748 16L0 13.333 5.333 8 0 2.667 2.748 0l7.919 8z" fill-rule="nonzero"/></svg>', reset: '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">\n        <path d="M0 0h24v24H0z" fill="none"/>\n        <path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"/>\n      </svg>' }, tooltipText: { one: "day", other: "days" } }, i2.options = s(s({}, i2.options), e3.element.dataset), Object.keys(i2.options).forEach(function(t3) {
              i2.options[t3] !== "true" && i2.options[t3] !== "false" || (i2.options[t3] = i2.options[t3] === "true");
            });
            var n2 = s(s({}, i2.options.dropdowns), e3.dropdowns), o2 = s(s({}, i2.options.buttonText), e3.buttonText), r2 = s(s({}, i2.options.tooltipText), e3.tooltipText);
            i2.options = s(s({}, i2.options), e3), i2.options.dropdowns = s({}, n2), i2.options.buttonText = s({}, o2), i2.options.tooltipText = s({}, r2), i2.options.elementEnd || (i2.options.allowRepick = false), i2.options.lockDays.length && (i2.options.lockDays = a.DateTime.convertArray(i2.options.lockDays, i2.options.lockDaysFormat)), i2.options.highlightedDays.length && (i2.options.highlightedDays = a.DateTime.convertArray(i2.options.highlightedDays, i2.options.highlightedDaysFormat));
            var l2 = i2.parseInput(), c2 = l2[0], h = l2[1];
            i2.options.startDate && (i2.options.singleMode || i2.options.endDate) && (c2 = new a.DateTime(i2.options.startDate, i2.options.format, i2.options.lang)), c2 && i2.options.endDate && (h = new a.DateTime(i2.options.endDate, i2.options.format, i2.options.lang)), c2 instanceof a.DateTime && !isNaN(c2.getTime()) && (i2.options.startDate = c2), i2.options.startDate && h instanceof a.DateTime && !isNaN(h.getTime()) && (i2.options.endDate = h), !i2.options.singleMode || i2.options.startDate instanceof a.DateTime || (i2.options.startDate = null), i2.options.singleMode || i2.options.startDate instanceof a.DateTime && i2.options.endDate instanceof a.DateTime || (i2.options.startDate = null, i2.options.endDate = null);
            for (var p = 0; p < i2.options.numberOfMonths; p += 1) {
              var d = i2.options.startDate instanceof a.DateTime ? i2.options.startDate.clone() : new a.DateTime();
              if (!i2.options.startDate && (p === 0 || i2.options.splitView)) {
                var u = i2.options.maxDate ? new a.DateTime(i2.options.maxDate) : null, m = i2.options.minDate ? new a.DateTime(i2.options.minDate) : null, f = i2.options.numberOfMonths - 1;
                m && u && d.isAfter(u) ? (d = m.clone()).setDate(1) : !m && u && d.isAfter(u) && ((d = u.clone()).setDate(1), d.setMonth(d.getMonth() - f));
              }
              d.setDate(1), d.setMonth(d.getMonth() + p), i2.calendars[p] = d;
            }
            if (i2.options.showTooltip)
              if (i2.options.tooltipPluralSelector)
                i2.pluralSelector = i2.options.tooltipPluralSelector;
              else
                try {
                  var g = new Intl.PluralRules(i2.options.lang);
                  i2.pluralSelector = g.select.bind(g);
                } catch (t3) {
                  i2.pluralSelector = function(t4) {
                    return Math.abs(t4) === 0 ? "one" : "other";
                  };
                }
            return i2;
          }
          return o(e2, t2), e2.add = function(t3, e3) {
            l.Litepicker.prototype[t3] = e3;
          }, e2.prototype.DateTime = function(t3, e3) {
            return t3 ? new a.DateTime(t3, e3) : new a.DateTime();
          }, e2.prototype.init = function() {
            var t3 = this;
            this.options.plugins && this.options.plugins.length && this.options.plugins.forEach(function(e3) {
              l.Litepicker.prototype.hasOwnProperty(e3) ? l.Litepicker.prototype[e3].init.call(t3, t3) : console.warn("Litepicker: plugin \xAB" + e3 + "\xBB not found.");
            });
          }, e2.prototype.parseInput = function() {
            var t3 = this.options.delimiter, e3 = new RegExp("" + t3), i2 = this.options.element instanceof HTMLInputElement ? this.options.element.value.split(t3) : [];
            if (this.options.elementEnd) {
              if (this.options.element instanceof HTMLInputElement && this.options.element.value.length && this.options.elementEnd instanceof HTMLInputElement && this.options.elementEnd.value.length)
                return [new a.DateTime(this.options.element.value, this.options.format), new a.DateTime(this.options.elementEnd.value, this.options.format)];
            } else if (this.options.singleMode) {
              if (this.options.element instanceof HTMLInputElement && this.options.element.value.length)
                return [new a.DateTime(this.options.element.value, this.options.format)];
            } else if (this.options.element instanceof HTMLInputElement && e3.test(this.options.element.value) && i2.length && i2.length % 2 == 0) {
              var n2 = i2.slice(0, i2.length / 2).join(t3), o2 = i2.slice(i2.length / 2).join(t3);
              return [new a.DateTime(n2, this.options.format), new a.DateTime(o2, this.options.format)];
            }
            return [];
          }, e2.prototype.isShowning = function() {
            return this.ui && this.ui.style.display !== "none";
          }, e2.prototype.findPosition = function(t3) {
            var e3 = t3.getBoundingClientRect(), i2 = this.ui.getBoundingClientRect(), n2 = this.options.position.split(" "), o2 = window.scrollX || window.pageXOffset, s2 = window.scrollY || window.pageYOffset, r2 = 0, a2 = 0;
            if (n2[0] !== "auto" && /top|bottom/.test(n2[0]))
              r2 = e3[n2[0]] + s2, n2[0] === "top" && (r2 -= i2.height);
            else {
              r2 = e3.bottom + s2;
              var l2 = e3.bottom + i2.height > window.innerHeight, c2 = e3.top + s2 - i2.height >= i2.height;
              l2 && c2 && (r2 = e3.top + s2 - i2.height);
            }
            if (/left|right/.test(n2[0]) || n2[1] && n2[1] !== "auto" && /left|right/.test(n2[1]))
              a2 = /left|right/.test(n2[0]) ? e3[n2[0]] + o2 : e3[n2[1]] + o2, n2[0] !== "right" && n2[1] !== "right" || (a2 -= i2.width);
            else {
              a2 = e3.left + o2;
              l2 = e3.left + i2.width > window.innerWidth;
              var h = e3.right + o2 - i2.width >= 0;
              l2 && h && (a2 = e3.right + o2 - i2.width);
            }
            return { left: a2, top: r2 };
          }, e2;
        }(r.EventEmitter);
        e.LPCore = c;
      }, function(t, e, i) {
        "use strict";
        var n, o = typeof Reflect == "object" ? Reflect : null, s = o && typeof o.apply == "function" ? o.apply : function(t2, e2, i2) {
          return Function.prototype.apply.call(t2, e2, i2);
        };
        n = o && typeof o.ownKeys == "function" ? o.ownKeys : Object.getOwnPropertySymbols ? function(t2) {
          return Object.getOwnPropertyNames(t2).concat(Object.getOwnPropertySymbols(t2));
        } : function(t2) {
          return Object.getOwnPropertyNames(t2);
        };
        var r = Number.isNaN || function(t2) {
          return t2 != t2;
        };
        function a() {
          a.init.call(this);
        }
        t.exports = a, a.EventEmitter = a, a.prototype._events = void 0, a.prototype._eventsCount = 0, a.prototype._maxListeners = void 0;
        var l = 10;
        function c(t2) {
          return t2._maxListeners === void 0 ? a.defaultMaxListeners : t2._maxListeners;
        }
        function h(t2, e2, i2, n2) {
          var o2, s2, r2, a2;
          if (typeof i2 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof i2);
          if ((s2 = t2._events) === void 0 ? (s2 = t2._events = /* @__PURE__ */ Object.create(null), t2._eventsCount = 0) : (s2.newListener !== void 0 && (t2.emit("newListener", e2, i2.listener ? i2.listener : i2), s2 = t2._events), r2 = s2[e2]), r2 === void 0)
            r2 = s2[e2] = i2, ++t2._eventsCount;
          else if (typeof r2 == "function" ? r2 = s2[e2] = n2 ? [i2, r2] : [r2, i2] : n2 ? r2.unshift(i2) : r2.push(i2), (o2 = c(t2)) > 0 && r2.length > o2 && !r2.warned) {
            r2.warned = true;
            var l2 = new Error("Possible EventEmitter memory leak detected. " + r2.length + " " + String(e2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            l2.name = "MaxListenersExceededWarning", l2.emitter = t2, l2.type = e2, l2.count = r2.length, a2 = l2, console && console.warn && console.warn(a2);
          }
          return t2;
        }
        function p() {
          for (var t2 = [], e2 = 0; e2 < arguments.length; e2++)
            t2.push(arguments[e2]);
          this.fired || (this.target.removeListener(this.type, this.wrapFn), this.fired = true, s(this.listener, this.target, t2));
        }
        function d(t2, e2, i2) {
          var n2 = { fired: false, wrapFn: void 0, target: t2, type: e2, listener: i2 }, o2 = p.bind(n2);
          return o2.listener = i2, n2.wrapFn = o2, o2;
        }
        function u(t2, e2, i2) {
          var n2 = t2._events;
          if (n2 === void 0)
            return [];
          var o2 = n2[e2];
          return o2 === void 0 ? [] : typeof o2 == "function" ? i2 ? [o2.listener || o2] : [o2] : i2 ? function(t3) {
            for (var e3 = new Array(t3.length), i3 = 0; i3 < e3.length; ++i3)
              e3[i3] = t3[i3].listener || t3[i3];
            return e3;
          }(o2) : f(o2, o2.length);
        }
        function m(t2) {
          var e2 = this._events;
          if (e2 !== void 0) {
            var i2 = e2[t2];
            if (typeof i2 == "function")
              return 1;
            if (i2 !== void 0)
              return i2.length;
          }
          return 0;
        }
        function f(t2, e2) {
          for (var i2 = new Array(e2), n2 = 0; n2 < e2; ++n2)
            i2[n2] = t2[n2];
          return i2;
        }
        Object.defineProperty(a, "defaultMaxListeners", { enumerable: true, get: function() {
          return l;
        }, set: function(t2) {
          if (typeof t2 != "number" || t2 < 0 || r(t2))
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t2 + ".");
          l = t2;
        } }), a.init = function() {
          this._events !== void 0 && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }, a.prototype.setMaxListeners = function(t2) {
          if (typeof t2 != "number" || t2 < 0 || r(t2))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t2 + ".");
          return this._maxListeners = t2, this;
        }, a.prototype.getMaxListeners = function() {
          return c(this);
        }, a.prototype.emit = function(t2) {
          for (var e2 = [], i2 = 1; i2 < arguments.length; i2++)
            e2.push(arguments[i2]);
          var n2 = t2 === "error", o2 = this._events;
          if (o2 !== void 0)
            n2 = n2 && o2.error === void 0;
          else if (!n2)
            return false;
          if (n2) {
            var r2;
            if (e2.length > 0 && (r2 = e2[0]), r2 instanceof Error)
              throw r2;
            var a2 = new Error("Unhandled error." + (r2 ? " (" + r2.message + ")" : ""));
            throw a2.context = r2, a2;
          }
          var l2 = o2[t2];
          if (l2 === void 0)
            return false;
          if (typeof l2 == "function")
            s(l2, this, e2);
          else {
            var c2 = l2.length, h2 = f(l2, c2);
            for (i2 = 0; i2 < c2; ++i2)
              s(h2[i2], this, e2);
          }
          return true;
        }, a.prototype.addListener = function(t2, e2) {
          return h(this, t2, e2, false);
        }, a.prototype.on = a.prototype.addListener, a.prototype.prependListener = function(t2, e2) {
          return h(this, t2, e2, true);
        }, a.prototype.once = function(t2, e2) {
          if (typeof e2 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e2);
          return this.on(t2, d(this, t2, e2)), this;
        }, a.prototype.prependOnceListener = function(t2, e2) {
          if (typeof e2 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e2);
          return this.prependListener(t2, d(this, t2, e2)), this;
        }, a.prototype.removeListener = function(t2, e2) {
          var i2, n2, o2, s2, r2;
          if (typeof e2 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e2);
          if ((n2 = this._events) === void 0)
            return this;
          if ((i2 = n2[t2]) === void 0)
            return this;
          if (i2 === e2 || i2.listener === e2)
            --this._eventsCount == 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete n2[t2], n2.removeListener && this.emit("removeListener", t2, i2.listener || e2));
          else if (typeof i2 != "function") {
            for (o2 = -1, s2 = i2.length - 1; s2 >= 0; s2--)
              if (i2[s2] === e2 || i2[s2].listener === e2) {
                r2 = i2[s2].listener, o2 = s2;
                break;
              }
            if (o2 < 0)
              return this;
            o2 === 0 ? i2.shift() : function(t3, e3) {
              for (; e3 + 1 < t3.length; e3++)
                t3[e3] = t3[e3 + 1];
              t3.pop();
            }(i2, o2), i2.length === 1 && (n2[t2] = i2[0]), n2.removeListener !== void 0 && this.emit("removeListener", t2, r2 || e2);
          }
          return this;
        }, a.prototype.off = a.prototype.removeListener, a.prototype.removeAllListeners = function(t2) {
          var e2, i2, n2;
          if ((i2 = this._events) === void 0)
            return this;
          if (i2.removeListener === void 0)
            return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : i2[t2] !== void 0 && (--this._eventsCount == 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete i2[t2]), this;
          if (arguments.length === 0) {
            var o2, s2 = Object.keys(i2);
            for (n2 = 0; n2 < s2.length; ++n2)
              (o2 = s2[n2]) !== "removeListener" && this.removeAllListeners(o2);
            return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
          }
          if (typeof (e2 = i2[t2]) == "function")
            this.removeListener(t2, e2);
          else if (e2 !== void 0)
            for (n2 = e2.length - 1; n2 >= 0; n2--)
              this.removeListener(t2, e2[n2]);
          return this;
        }, a.prototype.listeners = function(t2) {
          return u(this, t2, true);
        }, a.prototype.rawListeners = function(t2) {
          return u(this, t2, false);
        }, a.listenerCount = function(t2, e2) {
          return typeof t2.listenerCount == "function" ? t2.listenerCount(e2) : m.call(t2, e2);
        }, a.prototype.listenerCount = m, a.prototype.eventNames = function() {
          return this._eventsCount > 0 ? n(this._events) : [];
        };
      }, function(t, e, i) {
        (e = i(9)(false)).push([t.i, ':root{--litepicker-container-months-color-bg: #fff;--litepicker-container-months-box-shadow-color: #ddd;--litepicker-footer-color-bg: #fafafa;--litepicker-footer-box-shadow-color: #ddd;--litepicker-tooltip-color-bg: #fff;--litepicker-month-header-color: #333;--litepicker-button-prev-month-color: #9e9e9e;--litepicker-button-next-month-color: #9e9e9e;--litepicker-button-prev-month-color-hover: #2196f3;--litepicker-button-next-month-color-hover: #2196f3;--litepicker-month-width: calc(var(--litepicker-day-width) * 7);--litepicker-month-weekday-color: #9e9e9e;--litepicker-month-week-number-color: #9e9e9e;--litepicker-day-width: 38px;--litepicker-day-color: #333;--litepicker-day-color-hover: #2196f3;--litepicker-is-today-color: #f44336;--litepicker-is-in-range-color: #bbdefb;--litepicker-is-locked-color: #9e9e9e;--litepicker-is-start-color: #fff;--litepicker-is-start-color-bg: #2196f3;--litepicker-is-end-color: #fff;--litepicker-is-end-color-bg: #2196f3;--litepicker-button-cancel-color: #fff;--litepicker-button-cancel-color-bg: #9e9e9e;--litepicker-button-apply-color: #fff;--litepicker-button-apply-color-bg: #2196f3;--litepicker-button-reset-color: #909090;--litepicker-button-reset-color-hover: #2196f3;--litepicker-highlighted-day-color: #333;--litepicker-highlighted-day-color-bg: #ffeb3b}.show-week-numbers{--litepicker-month-width: calc(var(--litepicker-day-width) * 8)}.litepicker{font-family:-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;font-size:0.8em;display:none}.litepicker button{border:none;background:none}.litepicker .container__main{display:-webkit-box;display:-ms-flexbox;display:flex}.litepicker .container__months{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:var(--litepicker-container-months-color-bg);border-radius:5px;-webkit-box-shadow:0 0 5px var(--litepicker-container-months-box-shadow-color);box-shadow:0 0 5px var(--litepicker-container-months-box-shadow-color);width:calc(var(--litepicker-month-width) + 10px);-webkit-box-sizing:content-box;box-sizing:content-box}.litepicker .container__months.columns-2{width:calc((var(--litepicker-month-width) * 2) + 20px)}.litepicker .container__months.columns-3{width:calc((var(--litepicker-month-width) * 3) + 30px)}.litepicker .container__months.columns-4{width:calc((var(--litepicker-month-width) * 4) + 40px)}.litepicker .container__months.split-view .month-item-header .button-previous-month,.litepicker .container__months.split-view .month-item-header .button-next-month{visibility:visible}.litepicker .container__months .month-item{padding:5px;width:var(--litepicker-month-width);-webkit-box-sizing:content-box;box-sizing:content-box}.litepicker .container__months .month-item-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;font-weight:500;padding:10px 5px;text-align:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--litepicker-month-header-color)}.litepicker .container__months .month-item-header div{-webkit-box-flex:1;-ms-flex:1;flex:1}.litepicker .container__months .month-item-header div>.month-item-name{margin-right:5px}.litepicker .container__months .month-item-header div>.month-item-year{padding:0}.litepicker .container__months .month-item-header .reset-button{color:var(--litepicker-button-reset-color)}.litepicker .container__months .month-item-header .reset-button>svg{fill:var(--litepicker-button-reset-color)}.litepicker .container__months .month-item-header .reset-button *{pointer-events:none}.litepicker .container__months .month-item-header .reset-button:hover{color:var(--litepicker-button-reset-color-hover)}.litepicker .container__months .month-item-header .reset-button:hover>svg{fill:var(--litepicker-button-reset-color-hover)}.litepicker .container__months .month-item-header .button-previous-month,.litepicker .container__months .month-item-header .button-next-month{visibility:hidden;text-decoration:none;padding:3px 5px;border-radius:3px;-webkit-transition:color 0.3s, border 0.3s;transition:color 0.3s, border 0.3s;cursor:default}.litepicker .container__months .month-item-header .button-previous-month *,.litepicker .container__months .month-item-header .button-next-month *{pointer-events:none}.litepicker .container__months .month-item-header .button-previous-month{color:var(--litepicker-button-prev-month-color)}.litepicker .container__months .month-item-header .button-previous-month>svg,.litepicker .container__months .month-item-header .button-previous-month>img{fill:var(--litepicker-button-prev-month-color)}.litepicker .container__months .month-item-header .button-previous-month:hover{color:var(--litepicker-button-prev-month-color-hover)}.litepicker .container__months .month-item-header .button-previous-month:hover>svg{fill:var(--litepicker-button-prev-month-color-hover)}.litepicker .container__months .month-item-header .button-next-month{color:var(--litepicker-button-next-month-color)}.litepicker .container__months .month-item-header .button-next-month>svg,.litepicker .container__months .month-item-header .button-next-month>img{fill:var(--litepicker-button-next-month-color)}.litepicker .container__months .month-item-header .button-next-month:hover{color:var(--litepicker-button-next-month-color-hover)}.litepicker .container__months .month-item-header .button-next-month:hover>svg{fill:var(--litepicker-button-next-month-color-hover)}.litepicker .container__months .month-item-weekdays-row{display:-webkit-box;display:-ms-flexbox;display:flex;justify-self:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;color:var(--litepicker-month-weekday-color)}.litepicker .container__months .month-item-weekdays-row>div{padding:5px 0;font-size:85%;-webkit-box-flex:1;-ms-flex:1;flex:1;width:var(--litepicker-day-width);text-align:center}.litepicker .container__months .month-item:first-child .button-previous-month{visibility:visible}.litepicker .container__months .month-item:last-child .button-next-month{visibility:visible}.litepicker .container__months .month-item.no-previous-month .button-previous-month{visibility:hidden}.litepicker .container__months .month-item.no-next-month .button-next-month{visibility:hidden}.litepicker .container__days{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;justify-self:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;text-align:center;-webkit-box-sizing:content-box;box-sizing:content-box}.litepicker .container__days>div,.litepicker .container__days>a{padding:5px 0;width:var(--litepicker-day-width)}.litepicker .container__days .day-item{color:var(--litepicker-day-color);text-align:center;text-decoration:none;border-radius:3px;-webkit-transition:color 0.3s, border 0.3s;transition:color 0.3s, border 0.3s;cursor:default}.litepicker .container__days .day-item:hover{color:var(--litepicker-day-color-hover);-webkit-box-shadow:inset 0 0 0 1px var(--litepicker-day-color-hover);box-shadow:inset 0 0 0 1px var(--litepicker-day-color-hover)}.litepicker .container__days .day-item.is-today{color:var(--litepicker-is-today-color)}.litepicker .container__days .day-item.is-locked{color:var(--litepicker-is-locked-color)}.litepicker .container__days .day-item.is-locked:hover{color:var(--litepicker-is-locked-color);-webkit-box-shadow:none;box-shadow:none;cursor:default}.litepicker .container__days .day-item.is-in-range{background-color:var(--litepicker-is-in-range-color);border-radius:0}.litepicker .container__days .day-item.is-start-date{color:var(--litepicker-is-start-color);background-color:var(--litepicker-is-start-color-bg);border-top-left-radius:5px;border-bottom-left-radius:5px;border-top-right-radius:0;border-bottom-right-radius:0}.litepicker .container__days .day-item.is-start-date.is-flipped{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:5px;border-bottom-right-radius:5px}.litepicker .container__days .day-item.is-end-date{color:var(--litepicker-is-end-color);background-color:var(--litepicker-is-end-color-bg);border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:5px;border-bottom-right-radius:5px}.litepicker .container__days .day-item.is-end-date.is-flipped{border-top-left-radius:5px;border-bottom-left-radius:5px;border-top-right-radius:0;border-bottom-right-radius:0}.litepicker .container__days .day-item.is-start-date.is-end-date{border-top-left-radius:5px;border-bottom-left-radius:5px;border-top-right-radius:5px;border-bottom-right-radius:5px}.litepicker .container__days .day-item.is-highlighted{color:var(--litepicker-highlighted-day-color);background-color:var(--litepicker-highlighted-day-color-bg)}.litepicker .container__days .week-number{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;color:var(--litepicker-month-week-number-color);font-size:85%}.litepicker .container__footer{text-align:right;padding:10px 5px;margin:0 5px;background-color:var(--litepicker-footer-color-bg);-webkit-box-shadow:inset 0px 3px 3px 0px var(--litepicker-footer-box-shadow-color);box-shadow:inset 0px 3px 3px 0px var(--litepicker-footer-box-shadow-color);border-bottom-left-radius:5px;border-bottom-right-radius:5px}.litepicker .container__footer .preview-date-range{margin-right:10px;font-size:90%}.litepicker .container__footer .button-cancel{background-color:var(--litepicker-button-cancel-color-bg);color:var(--litepicker-button-cancel-color);border:0;padding:3px 7px 4px;border-radius:3px}.litepicker .container__footer .button-cancel *{pointer-events:none}.litepicker .container__footer .button-apply{background-color:var(--litepicker-button-apply-color-bg);color:var(--litepicker-button-apply-color);border:0;padding:3px 7px 4px;border-radius:3px;margin-left:10px;margin-right:10px}.litepicker .container__footer .button-apply:disabled{opacity:0.7}.litepicker .container__footer .button-apply *{pointer-events:none}.litepicker .container__tooltip{position:absolute;margin-top:-4px;padding:4px 8px;border-radius:4px;background-color:var(--litepicker-tooltip-color-bg);-webkit-box-shadow:0 1px 3px rgba(0,0,0,0.25);box-shadow:0 1px 3px rgba(0,0,0,0.25);white-space:nowrap;font-size:11px;pointer-events:none;visibility:hidden}.litepicker .container__tooltip:before{position:absolute;bottom:-5px;left:calc(50% - 5px);border-top:5px solid rgba(0,0,0,0.12);border-right:5px solid transparent;border-left:5px solid transparent;content:""}.litepicker .container__tooltip:after{position:absolute;bottom:-4px;left:calc(50% - 4px);border-top:4px solid var(--litepicker-tooltip-color-bg);border-right:4px solid transparent;border-left:4px solid transparent;content:""}\n', ""]), e.locals = { showWeekNumbers: "show-week-numbers", litepicker: "litepicker", containerMain: "container__main", containerMonths: "container__months", columns2: "columns-2", columns3: "columns-3", columns4: "columns-4", splitView: "split-view", monthItemHeader: "month-item-header", buttonPreviousMonth: "button-previous-month", buttonNextMonth: "button-next-month", monthItem: "month-item", monthItemName: "month-item-name", monthItemYear: "month-item-year", resetButton: "reset-button", monthItemWeekdaysRow: "month-item-weekdays-row", noPreviousMonth: "no-previous-month", noNextMonth: "no-next-month", containerDays: "container__days", dayItem: "day-item", isToday: "is-today", isLocked: "is-locked", isInRange: "is-in-range", isStartDate: "is-start-date", isFlipped: "is-flipped", isEndDate: "is-end-date", isHighlighted: "is-highlighted", weekNumber: "week-number", containerFooter: "container__footer", previewDateRange: "preview-date-range", buttonCancel: "button-cancel", buttonApply: "button-apply", containerTooltip: "container__tooltip" }, t.exports = e;
      }, function(t, e, i) {
        "use strict";
        t.exports = function(t2) {
          var e2 = [];
          return e2.toString = function() {
            return this.map(function(e3) {
              var i2 = function(t3, e4) {
                var i3 = t3[1] || "", n = t3[3];
                if (!n)
                  return i3;
                if (e4 && typeof btoa == "function") {
                  var o = (r = n, a = btoa(unescape(encodeURIComponent(JSON.stringify(r)))), l = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a), "/*# ".concat(l, " */")), s = n.sources.map(function(t4) {
                    return "/*# sourceURL=".concat(n.sourceRoot || "").concat(t4, " */");
                  });
                  return [i3].concat(s).concat([o]).join("\n");
                }
                var r, a, l;
                return [i3].join("\n");
              }(e3, t2);
              return e3[2] ? "@media ".concat(e3[2], " {").concat(i2, "}") : i2;
            }).join("");
          }, e2.i = function(t3, i2, n) {
            typeof t3 == "string" && (t3 = [[null, t3, ""]]);
            var o = {};
            if (n)
              for (var s = 0; s < this.length; s++) {
                var r = this[s][0];
                r != null && (o[r] = true);
              }
            for (var a = 0; a < t3.length; a++) {
              var l = [].concat(t3[a]);
              n && o[l[0]] || (i2 && (l[2] ? l[2] = "".concat(i2, " and ").concat(l[2]) : l[2] = i2), e2.push(l));
            }
          }, e2;
        };
      }, function(t, e, i) {
        "use strict";
        var n, o = {}, s = function() {
          return n === void 0 && (n = Boolean(window && document && document.all && !window.atob)), n;
        }, r = function() {
          var t2 = {};
          return function(e2) {
            if (t2[e2] === void 0) {
              var i2 = document.querySelector(e2);
              if (window.HTMLIFrameElement && i2 instanceof window.HTMLIFrameElement)
                try {
                  i2 = i2.contentDocument.head;
                } catch (t3) {
                  i2 = null;
                }
              t2[e2] = i2;
            }
            return t2[e2];
          };
        }();
        function a(t2, e2) {
          for (var i2 = [], n2 = {}, o2 = 0; o2 < t2.length; o2++) {
            var s2 = t2[o2], r2 = e2.base ? s2[0] + e2.base : s2[0], a2 = { css: s2[1], media: s2[2], sourceMap: s2[3] };
            n2[r2] ? n2[r2].parts.push(a2) : i2.push(n2[r2] = { id: r2, parts: [a2] });
          }
          return i2;
        }
        function l(t2, e2) {
          for (var i2 = 0; i2 < t2.length; i2++) {
            var n2 = t2[i2], s2 = o[n2.id], r2 = 0;
            if (s2) {
              for (s2.refs++; r2 < s2.parts.length; r2++)
                s2.parts[r2](n2.parts[r2]);
              for (; r2 < n2.parts.length; r2++)
                s2.parts.push(g(n2.parts[r2], e2));
            } else {
              for (var a2 = []; r2 < n2.parts.length; r2++)
                a2.push(g(n2.parts[r2], e2));
              o[n2.id] = { id: n2.id, refs: 1, parts: a2 };
            }
          }
        }
        function c(t2) {
          var e2 = document.createElement("style");
          if (t2.attributes.nonce === void 0) {
            var n2 = i.nc;
            n2 && (t2.attributes.nonce = n2);
          }
          if (Object.keys(t2.attributes).forEach(function(i2) {
            e2.setAttribute(i2, t2.attributes[i2]);
          }), typeof t2.insert == "function")
            t2.insert(e2);
          else {
            var o2 = r(t2.insert || "head");
            if (!o2)
              throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
            o2.appendChild(e2);
          }
          return e2;
        }
        var h, p = (h = [], function(t2, e2) {
          return h[t2] = e2, h.filter(Boolean).join("\n");
        });
        function d(t2, e2, i2, n2) {
          var o2 = i2 ? "" : n2.css;
          if (t2.styleSheet)
            t2.styleSheet.cssText = p(e2, o2);
          else {
            var s2 = document.createTextNode(o2), r2 = t2.childNodes;
            r2[e2] && t2.removeChild(r2[e2]), r2.length ? t2.insertBefore(s2, r2[e2]) : t2.appendChild(s2);
          }
        }
        function u(t2, e2, i2) {
          var n2 = i2.css, o2 = i2.media, s2 = i2.sourceMap;
          if (o2 && t2.setAttribute("media", o2), s2 && btoa && (n2 += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s2)))), " */")), t2.styleSheet)
            t2.styleSheet.cssText = n2;
          else {
            for (; t2.firstChild; )
              t2.removeChild(t2.firstChild);
            t2.appendChild(document.createTextNode(n2));
          }
        }
        var m = null, f = 0;
        function g(t2, e2) {
          var i2, n2, o2;
          if (e2.singleton) {
            var s2 = f++;
            i2 = m || (m = c(e2)), n2 = d.bind(null, i2, s2, false), o2 = d.bind(null, i2, s2, true);
          } else
            i2 = c(e2), n2 = u.bind(null, i2, e2), o2 = function() {
              !function(t3) {
                if (t3.parentNode === null)
                  return false;
                t3.parentNode.removeChild(t3);
              }(i2);
            };
          return n2(t2), function(e3) {
            if (e3) {
              if (e3.css === t2.css && e3.media === t2.media && e3.sourceMap === t2.sourceMap)
                return;
              n2(t2 = e3);
            } else
              o2();
          };
        }
        t.exports = function(t2, e2) {
          (e2 = e2 || {}).attributes = typeof e2.attributes == "object" ? e2.attributes : {}, e2.singleton || typeof e2.singleton == "boolean" || (e2.singleton = s());
          var i2 = a(t2, e2);
          return l(i2, e2), function(t3) {
            for (var n2 = [], s2 = 0; s2 < i2.length; s2++) {
              var r2 = i2[s2], c2 = o[r2.id];
              c2 && (c2.refs--, n2.push(c2));
            }
            t3 && l(a(t3, e2), e2);
            for (var h2 = 0; h2 < n2.length; h2++) {
              var p2 = n2[h2];
              if (p2.refs === 0) {
                for (var d2 = 0; d2 < p2.parts.length; d2++)
                  p2.parts[d2]();
                delete o[p2.id];
              }
            }
          };
        };
      }, function(t, e, i) {
        "use strict";
        var n = this && this.__assign || function() {
          return (n = Object.assign || function(t2) {
            for (var e2, i2 = 1, n2 = arguments.length; i2 < n2; i2++)
              for (var o2 in e2 = arguments[i2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }).apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true });
        var o = i(0), s = i(1), r = i(2);
        s.Litepicker.prototype.show = function(t2) {
          t2 === void 0 && (t2 = null), this.emit("before:show", t2);
          var e2 = t2 || this.options.element;
          if (this.triggerElement = e2, !this.isShowning()) {
            if (this.options.inlineMode)
              return this.ui.style.position = "relative", this.ui.style.display = "inline-block", this.ui.style.top = null, this.ui.style.left = null, this.ui.style.bottom = null, void (this.ui.style.right = null);
            this.scrollToDate(t2), this.render(), this.ui.style.position = "absolute", this.ui.style.display = "block", this.ui.style.zIndex = this.options.zIndex;
            var i2 = this.findPosition(e2);
            this.ui.style.top = i2.top + "px", this.ui.style.left = i2.left + "px", this.ui.style.right = null, this.ui.style.bottom = null, this.emit("show", t2);
          }
        }, s.Litepicker.prototype.hide = function() {
          this.isShowning() && (this.datePicked.length = 0, this.updateInput(), this.options.inlineMode ? this.render() : (this.ui.style.display = "none", this.emit("hide")));
        }, s.Litepicker.prototype.getDate = function() {
          return this.getStartDate();
        }, s.Litepicker.prototype.getStartDate = function() {
          return this.options.startDate ? this.options.startDate.clone() : null;
        }, s.Litepicker.prototype.getEndDate = function() {
          return this.options.endDate ? this.options.endDate.clone() : null;
        }, s.Litepicker.prototype.setDate = function(t2, e2) {
          e2 === void 0 && (e2 = false);
          var i2 = new o.DateTime(t2, this.options.format, this.options.lang);
          r.dateIsLocked(i2, this.options, [i2]) && !e2 ? this.emit("error:date", i2) : (this.setStartDate(t2), this.options.inlineMode && this.render(), this.emit("selected", this.getDate()));
        }, s.Litepicker.prototype.setStartDate = function(t2) {
          t2 && (this.options.startDate = new o.DateTime(t2, this.options.format, this.options.lang), this.updateInput());
        }, s.Litepicker.prototype.setEndDate = function(t2) {
          t2 && (this.options.endDate = new o.DateTime(t2, this.options.format, this.options.lang), this.options.startDate.getTime() > this.options.endDate.getTime() && (this.options.endDate = this.options.startDate.clone(), this.options.startDate = new o.DateTime(t2, this.options.format, this.options.lang)), this.updateInput());
        }, s.Litepicker.prototype.setDateRange = function(t2, e2, i2) {
          i2 === void 0 && (i2 = false), this.triggerElement = void 0;
          var n2 = new o.DateTime(t2, this.options.format, this.options.lang), s2 = new o.DateTime(e2, this.options.format, this.options.lang);
          (this.options.disallowLockDaysInRange ? r.rangeIsLocked([n2, s2], this.options) : r.dateIsLocked(n2, this.options, [n2, s2]) || r.dateIsLocked(s2, this.options, [n2, s2])) && !i2 ? this.emit("error:range", [n2, s2]) : (this.setStartDate(n2), this.setEndDate(s2), this.options.inlineMode && this.render(), this.updateInput(), this.emit("selected", this.getStartDate(), this.getEndDate()));
        }, s.Litepicker.prototype.gotoDate = function(t2, e2) {
          e2 === void 0 && (e2 = 0);
          var i2 = new o.DateTime(t2);
          i2.setDate(1), this.calendars[e2] = i2.clone(), this.render();
        }, s.Litepicker.prototype.setLockDays = function(t2) {
          this.options.lockDays = o.DateTime.convertArray(t2, this.options.lockDaysFormat), this.render();
        }, s.Litepicker.prototype.setHighlightedDays = function(t2) {
          this.options.highlightedDays = o.DateTime.convertArray(t2, this.options.highlightedDaysFormat), this.render();
        }, s.Litepicker.prototype.setOptions = function(t2) {
          delete t2.element, delete t2.elementEnd, delete t2.parentEl, t2.startDate && (t2.startDate = new o.DateTime(t2.startDate, this.options.format, this.options.lang)), t2.endDate && (t2.endDate = new o.DateTime(t2.endDate, this.options.format, this.options.lang));
          var e2 = n(n({}, this.options.dropdowns), t2.dropdowns), i2 = n(n({}, this.options.buttonText), t2.buttonText), s2 = n(n({}, this.options.tooltipText), t2.tooltipText);
          this.options = n(n({}, this.options), t2), this.options.dropdowns = n({}, e2), this.options.buttonText = n({}, i2), this.options.tooltipText = n({}, s2), !this.options.singleMode || this.options.startDate instanceof o.DateTime || (this.options.startDate = null, this.options.endDate = null), this.options.singleMode || this.options.startDate instanceof o.DateTime && this.options.endDate instanceof o.DateTime || (this.options.startDate = null, this.options.endDate = null);
          for (var r2 = 0; r2 < this.options.numberOfMonths; r2 += 1) {
            var a = this.options.startDate ? this.options.startDate.clone() : new o.DateTime();
            a.setDate(1), a.setMonth(a.getMonth() + r2), this.calendars[r2] = a;
          }
          this.options.lockDays.length && (this.options.lockDays = o.DateTime.convertArray(this.options.lockDays, this.options.lockDaysFormat)), this.options.highlightedDays.length && (this.options.highlightedDays = o.DateTime.convertArray(this.options.highlightedDays, this.options.highlightedDaysFormat)), this.render(), this.options.inlineMode && this.show(), this.updateInput();
        }, s.Litepicker.prototype.clearSelection = function() {
          this.options.startDate = null, this.options.endDate = null, this.datePicked.length = 0, this.updateInput(), this.isShowning() && this.render(), this.emit("clear:selection");
        }, s.Litepicker.prototype.destroy = function() {
          this.ui && this.ui.parentNode && (this.ui.parentNode.removeChild(this.ui), this.ui = null), this.emit("destroy");
        };
      }]);
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GooglePhotos
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/renderer.ts
var import_obsidian = require("obsidian");
var ThumbnailImage = class extends Image {
};
var Renderer = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.thumbnailWidth = this.plugin.settings.thumbnailWidth;
    this.thumbnailHeight = this.plugin.settings.thumbnailHeight;
    this.spinner = document.createElement("div");
    this.spinner.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="161px" height="161px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
      <circle cx="84" cy="50" r="10" fill="#c5523f"><animate attributeName="r" repeatCount="indefinite" dur="0.4807692307692307s" calcMode="spline" keyTimes="0;1" values="10;0" keySplines="0 0.5 0.5 1" begin="0s"></animate><animate attributeName="fill" repeatCount="indefinite" dur="1.923076923076923s" calcMode="discrete" keyTimes="0;0.25;0.5;0.75;1" values="#c5523f;#1875e5;#499255;#f2b736;#c5523f" begin="0s"></animate></circle>
      <circle cx="16" cy="50" r="10" fill="#c5523f"><animate attributeName="r" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="0;0;10;10;10" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="0s"></animate><animate attributeName="cx" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="16;16;16;50;84" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="0s"></animate></circle>
      <circle cx="50" cy="50" r="10" fill="#f2b736"><animate attributeName="r" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="0;0;10;10;10" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="-0.4807692307692307s"></animate><animate attributeName="cx" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="16;16;16;50;84" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="-0.4807692307692307s"></animate></circle>
      <circle cx="84" cy="50" r="10" fill="#499255"><animate attributeName="r" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="0;0;10;10;10" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="-0.9615384615384615s"></animate><animate attributeName="cx" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="16;16;16;50;84" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="-0.9615384615384615s"></animate></circle>
      <circle cx="16" cy="50" r="10" fill="#1875e5"><animate attributeName="r" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="0;0;10;10;10" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="-1.4423076923076923s"></animate><animate attributeName="cx" repeatCount="indefinite" dur="1.923076923076923s" calcMode="spline" keyTimes="0;0.25;0.5;0.75;1" values="16;16;16;50;84" keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1" begin="-1.4423076923076923s"></animate></circle></svg>`;
    this.spinner.style.display = "none";
    this.spinner.style.transform = "scale(0.5)";
  }
  isVisible(el) {
    return new Promise((resolve) => {
      const o = new IntersectionObserver(([entry]) => {
        resolve(entry.intersectionRatio > 0.3);
        o.disconnect();
      });
      o.observe(el);
    });
  }
  appendThumbnailsToElement(el, thumbnails, onclick) {
    (thumbnails || []).forEach(({ id, productUrl, baseUrl, mediaMetadata }) => {
      const img = new ThumbnailImage();
      const settings = this.plugin.settings;
      img.src = baseUrl + `=w500-h130`;
      img.photoId = id;
      img.baseUrl = baseUrl;
      img.productUrl = productUrl;
      const { creationTime } = mediaMetadata;
      img.creationTime = (0, import_obsidian.moment)(creationTime);
      img.filename = img.creationTime.format(settings.filename);
      img.onclick = onclick;
      img.classList.add("google-photos-grid-thumbnail");
      el.appendChild(img);
    });
  }
};
var GridView = class extends Renderer {
  constructor({ scrollEl, plugin, onThumbnailClick }) {
    super(plugin);
    this.searchParams = {};
    this.onThumbnailClick = () => {
    };
    this.fetching = false;
    this.moreResults = true;
    this.active = true;
    this.getThumbnails = async () => {
      if (this.fetching) {
        return;
      }
      this.fetching = true;
      const targetEl = this.gridEl;
      while (this.active && this.moreResults && this.scrollEl && this.scrollEl.scrollHeight - this.scrollEl.scrollTop < this.scrollEl.clientHeight + 5 * this.thumbnailHeight && (!targetEl.innerHTML || await this.isVisible(this.scrollEl))) {
        try {
          const localOptions = Object.assign({}, this.searchParams);
          if (this.nextPageToken)
            Object.assign(localOptions, { pageToken: this.nextPageToken });
          const { mediaItems, nextPageToken } = await this.plugin.photosApi.mediaItemsSearch(localOptions);
          if (mediaItems) {
            this.appendThumbnailsToElement(targetEl, mediaItems, (event) => this.onThumbnailClick(event));
          } else if (!targetEl.childElementCount) {
            targetEl.createEl("p", {
              text: "No photos found for this query."
            });
          }
          this.moreResults = !!nextPageToken;
          if (this.moreResults) {
            this.spinner.style.display = "block";
          } else {
            setTimeout(() => {
              this.spinner.style.display = "none";
            }, targetEl.childElementCount ? 1e3 : 0);
          }
          this.nextPageToken = nextPageToken;
        } catch (e) {
          console.log(e);
          if (e === "Retry") {
            console.log("Google Photos: Retrying authentication");
          } else {
            this.moreResults = false;
            this.nextPageToken = "";
            if (e === "Unauthenticated") {
              this.active = false;
              new import_obsidian.Notice("Failed to authenticate");
            } else {
              targetEl.createEl("p", {
                text: e
              });
            }
            this.spinner.style.display = "none";
            break;
          }
        }
      }
      this.fetching = false;
    };
    if (onThumbnailClick) {
      this.onThumbnailClick = onThumbnailClick;
    }
    this.containerEl = document.createElement("div");
    this.gridEl = this.containerEl.createEl("div");
    this.containerEl.appendChild(this.spinner);
    this.spinner.style.display = "block";
    this.scrollEl = scrollEl || this.containerEl;
    this.scrollEl.addEventListener("scroll", () => this.getThumbnails());
  }
  async resetGrid() {
    this.spinner.style.display = "block";
    const oldGrid = this.gridEl;
    oldGrid.empty();
    this.gridEl = document.createElement("div");
    this.containerEl.replaceChild(this.gridEl, oldGrid);
    this.active = true;
    this.fetching = false;
    this.nextPageToken = "";
    this.moreResults = true;
  }
  setSearchParams(searchParams) {
    this.searchParams = searchParams;
  }
  clearSearchParams() {
    this.searchParams = {};
  }
  destroy() {
    try {
      this.scrollEl.removeEventListener("scroll", () => this.getThumbnails());
    } catch (e) {
    }
    this.active = false;
  }
};

// src/photosApi.ts
var import_obsidian2 = require("obsidian");
var PhotosApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async request(endpoint, params = {}) {
    const s = this.plugin.settings;
    if (!s.accessToken || (0, import_obsidian2.moment)() > (0, import_obsidian2.moment)(s.expires)) {
      if (!await this.plugin.oauth.authenticate()) {
        throw "Unauthenticated";
      }
    }
    const resp = await fetch("https://photoslibrary.googleapis.com" + endpoint, Object.assign({
      method: "POST",
      headers: {
        "Authorization": "Bearer " + s.accessToken,
        "Content-Type": "application/json"
      }
    }, params));
    if (resp.status === 200) {
      return resp.json();
    } else if (resp.status === 400) {
      throw "\u26A0 Malformed input. Please check the filters you are using.";
    } else if (resp.status === 401) {
      if (await this.plugin.oauth.authenticate()) {
        throw "Retry";
      } else {
        throw "Unauthenticated";
      }
    } else {
      throw "Unknown status " + resp.status;
    }
  }
  async mediaItemsSearch(options = {}) {
    return this.request("/v1/mediaItems:search", {
      method: "POST",
      body: JSON.stringify(options)
    });
  }
  async listAlbums() {
    return this.request("/v1/albums", {
      method: "GET"
    });
  }
};

// src/oauth.ts
var import_obsidian3 = require("obsidian");
var OAuth = class {
  constructor(plugin) {
    this.callbackUrl = "https://localhost/google-photos";
    this.plugin = plugin;
  }
  async authenticate() {
    const s = this.plugin.settings;
    if (s.refreshToken) {
      console.log("Google Photos: attempting refresh token");
      if (await this.getAccessToken({
        refresh_token: s.refreshToken,
        client_id: s.clientId,
        client_secret: s.clientSecret,
        grant_type: "refresh_token"
      })) {
        console.log("success");
        return true;
      } else {
        s.refreshToken = "";
      }
    }
    console.log("Google Photos: attempting permissions");
    return this.requestPermissions();
  }
  requestPermissions() {
    return new Promise((resolve) => {
      if (import_obsidian3.Platform.isMobile) {
        new import_obsidian3.Notice("You will need to authenticate using a desktop device first before you can use a mobile device.");
        resolve(false);
      } else {
        const { BrowserWindow } = require_renderer2();
        const codeUrl = new URL("https://accounts.google.com/o/oauth2/v2/auth");
        codeUrl.search = new URLSearchParams({
          scope: "https://www.googleapis.com/auth/photoslibrary.readonly",
          include_granted_scopes: "true",
          response_type: "code",
          access_type: "offline",
          state: "state_parameter_passthrough_value",
          redirect_uri: this.callbackUrl,
          client_id: this.plugin.settings.clientId
        }).toString();
        const window2 = new BrowserWindow({
          width: 600,
          height: 800,
          webPreferences: {
            nodeIntegration: false,
            contextIsolation: true
          }
        });
        window2.loadURL(codeUrl.href).then();
        const { session: { webRequest } } = window2.webContents;
        const filter = {
          urls: [this.callbackUrl + "*"]
        };
        webRequest.onBeforeRequest(filter, async ({ url }) => {
          const code = new URL(url).searchParams.get("code") || "";
          const res = await this.getAccessToken({
            code,
            client_id: this.plugin.settings.clientId,
            client_secret: this.plugin.settings.clientSecret,
            redirect_uri: this.callbackUrl,
            grant_type: "authorization_code"
          });
          resolve(res);
          if (window2)
            window2.close();
        });
        window2.on("closed", () => {
          resolve(false);
        });
      }
    });
  }
  async getAccessToken(params = {}) {
    const url = new URL("https://oauth2.googleapis.com/token");
    url.search = new URLSearchParams(params).toString();
    const res = await fetch(url.href, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    });
    if (res.status === 200) {
      const { access_token, refresh_token, expires_in } = await res.json();
      this.plugin.settings.accessToken = access_token;
      if (refresh_token) {
        this.plugin.settings.refreshToken = refresh_token;
      }
      this.plugin.settings.expires = (0, import_obsidian3.moment)().add(expires_in, "second").format();
      await this.plugin.saveSettings();
      return true;
    } else {
      return false;
    }
  }
};

// src/settings.ts
var import_obsidian6 = require("obsidian");

// src/suggesters/FolderSuggester.ts
var import_obsidian5 = require("obsidian");

// src/suggesters/suggest.ts
var import_obsidian4 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggesters/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(inputEl) {
    this.inputEl = inputEl;
    this.scope = new import_obsidian4.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update().then();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/suggesters/FolderSuggester.ts
var FolderSuggest = class extends TextInputSuggest {
  getSuggestions(inputStr) {
    const abstractFiles = app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian5.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  clientId: "",
  clientSecret: "",
  accessToken: "",
  refreshToken: "",
  expires: (0, import_obsidian6.moment)().format(),
  thumbnailWidth: 400,
  thumbnailHeight: 280,
  filename: "YYYY-MM-DD[_google-photo_]HHmmss[.jpg]",
  thumbnailMarkdown: "[![]({{local_thumbnail_link}})]({{google_photo_url}}) ",
  parseNoteTitle: "YYYY-MM-DD",
  defaultToDailyPhotos: true,
  locationOption: "note",
  locationFolder: "",
  locationSubfolder: "photos"
};
var GooglePhotosSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Google Photos Settings" });
    new import_obsidian6.Setting(containerEl).setName("Photos API").setHeading();
    const setVisible = (setting, visible) => {
      setting.settingEl.style.display = visible ? "flex" : "none";
    };
    new import_obsidian6.Setting(containerEl).setName("Client ID").addText((text) => text.setPlaceholder("Enter your Client ID").setValue(this.plugin.settings.clientId).onChange(async (value) => {
      this.plugin.settings.clientId = value.trim();
      await this.plugin.saveSettings();
    })).then((setting) => {
      setting.descEl.appendText("Client ID from Google Photos API.");
      setting.descEl.createEl("br");
      setting.descEl.createEl("a", {
        text: "See the documentation",
        href: "https://github.com/alangrainger/obsidian-google-photos"
      });
      setting.descEl.appendText(" for instructions on how to get this ID.");
    });
    new import_obsidian6.Setting(containerEl).setName("Client Secret").addText((text) => text.setPlaceholder("Enter your Client Secret").setValue(this.plugin.settings.clientSecret).onChange(async (value) => {
      this.plugin.settings.clientSecret = value.trim();
      await this.plugin.saveSettings();
    })).then((setting) => {
      setting.descEl.appendText("Secret from Google Photos API.");
      setting.descEl.createEl("br");
      setting.descEl.createEl("a", {
        text: "See the documentation",
        href: "https://github.com/alangrainger/obsidian-google-photos"
      });
      setting.descEl.appendText(" for instructions on how to get this value.");
    });
    new import_obsidian6.Setting(containerEl).setDesc("Google Photos will automatically authenticate you when you start using the plugin. You can also manually initiate the authentication process by clicking this button.").addButton((btn) => btn.setButtonText("Open Photos API auth").setCta().onClick(async () => {
      await this.plugin.oauth.authenticate();
    }));
    new import_obsidian6.Setting(containerEl).setName("Thumbnail settings").setHeading().setDesc("Set the maximum size for your locally-saved thumbnail image. The image will fit within these dimensions while keeping the original aspect ratio.");
    new import_obsidian6.Setting(containerEl).setName("Thumbnail width").setDesc("Maximum width of the locally-saved thumbnail image in pixels").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.thumbnailWidth.toString()).setValue(this.plugin.settings.thumbnailWidth.toString()).onChange(async (value) => {
      this.plugin.settings.thumbnailWidth = +value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian6.Setting(containerEl).setName("Thumbnail height").setDesc("Maximum height of the locally-saved thumbnail image in pixels").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.thumbnailHeight.toString()).setValue(this.plugin.settings.thumbnailHeight.toString()).onChange(async (value) => {
      this.plugin.settings.thumbnailHeight = +value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian6.Setting(containerEl).setName("Image filename format").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.filename).setValue(this.plugin.settings.filename).onChange(async (value) => {
      this.plugin.settings.filename = value.trim();
      await this.plugin.saveSettings();
    })).then((setting) => {
      setting.descEl.appendText("This is the filename format used for saving thumbnail images. It must be in ");
      setting.descEl.createEl("a", {
        text: "MomentJS format",
        href: "https://momentjs.com/docs/#/displaying/format/"
      });
      setting.descEl.appendText(".");
      setting.descEl.createEl("br");
      setting.descEl.createEl("br");
      setting.descEl.appendText("The default value is");
      setting.descEl.createEl("br");
      setting.descEl.createEl("span", { cls: "markdown-rendered" }).createEl("code", { text: "YYYY-MM-DD[_google-photo_]HHmmss[.jpg]" });
      setting.descEl.createEl("br");
      setting.descEl.appendText("which will save thumbnails in a format like:");
      setting.descEl.createEl("br");
      setting.descEl.createEl("br");
      setting.descEl.appendText("2022-12-25_google-photo_182557.jpg");
      setting.descEl.createEl("br");
      setting.descEl.createEl("br");
      setting.descEl.appendText(`The date used is the "photo taken" date from the photo's metadata rather than the current date/time. This is to ensure that when you're adding photos to old journal entries, they are dated correctly and stored in your filesystem correctly.`);
    });
    const locationOptionEl = new import_obsidian6.Setting(this.containerEl);
    const locationFolderEl = new import_obsidian6.Setting(this.containerEl).setName("Thumbnail image folder").setDesc("Thumbnails will be saved to this folder").addSearch((search) => {
      new FolderSuggest(search.inputEl);
      search.setPlaceholder("Path/For/Thumbnails").setValue(this.plugin.settings.locationFolder).onChange(async (value) => {
        this.plugin.settings.locationFolder = value.trim();
        await this.plugin.saveSettings();
      });
    });
    const locationSubfolderEl = new import_obsidian6.Setting(this.containerEl).setName("Subfolder name").setDesc('If your current note is in "Journal/Daily" and you set the subfolder name to "photos", the thumbnails will be saved in "Journal/Daily/photos".').addText((text) => {
      text.setPlaceholder("photos").setValue(this.plugin.settings.locationSubfolder).onChange(async (value) => {
        this.plugin.settings.locationSubfolder = value.trim().replace(/^[\\\/]+/, "").replace(/[\\\/]+$/, "");
        await this.plugin.saveSettings();
      });
    });
    locationOptionEl.setName("Location to save thumbnails").setDesc("Where the local thumbnail images will be saved").addDropdown((dropdown) => {
      dropdown.addOption("note", "Same folder as the note").addOption("subfolder", "In a subfolder of the current note").addOption("specified", "In a specific folder").setValue(this.plugin.settings.locationOption).onChange(async (value) => {
        setVisible(locationFolderEl, value === "specified");
        setVisible(locationSubfolderEl, value === "subfolder");
        this.plugin.settings.locationOption = value;
        await this.plugin.saveSettings();
      });
    }).then(() => {
      setVisible(locationFolderEl, this.plugin.settings.locationOption === "specified");
      setVisible(locationSubfolderEl, this.plugin.settings.locationOption === "subfolder");
    });
    new import_obsidian6.Setting(containerEl).setName("Inserted Markdown").setDesc("This will be the text inserted when adding a thumbnail. You can use these variables:").addTextArea((text) => text.setPlaceholder(DEFAULT_SETTINGS.thumbnailMarkdown).setValue(this.plugin.settings.thumbnailMarkdown).onChange(async (value) => {
      this.plugin.settings.thumbnailMarkdown = value;
      await this.plugin.saveSettings();
    })).then((setting) => {
      const ul = setting.descEl.createEl("ul");
      ul.createEl("li").setText("local_thumbnail_link - The path to the locally saved thumbnail image");
      ul.createEl("li").setText("google_photo_url - The URL to the original Google Photo");
      ul.createEl("li").setText("taken_date - The date the photo was taken");
      ul.createEl("li").setText("google_base_url - Advanced variable, see Photos API docs");
      ul.createEl("li").setText("google_photo_id - Advanced variable, see Photos API docs");
    });
    new import_obsidian6.Setting(containerEl).setName("Other  settings").setHeading();
    new import_obsidian6.Setting(containerEl).setName("Default to showing photos from note date").setDesc("If the plugin detects you are on a daily note, it can default to show you photos from that date.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.defaultToDailyPhotos).onChange(async (value) => {
        this.plugin.settings.defaultToDailyPhotos = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Daily note date format").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.parseNoteTitle).setValue(this.plugin.settings.parseNoteTitle).onChange(async (value) => {
      this.plugin.settings.parseNoteTitle = value.trim();
      await this.plugin.saveSettings();
    })).then((setting) => {
      setting.descEl.appendText("This is the ");
      setting.descEl.createEl("a", {
        text: "MomentJS date format",
        href: "https://momentjs.com/docs/#/displaying/format/"
      });
      setting.descEl.appendText(" used in the title of your daily notes, so we can parse them back to a date.");
    });
  }
};

// src/photoModal.ts
var import_obsidian7 = require("obsidian");

// src/handlebars.ts
function handlebarParse(content, template) {
  for (const key of Object.keys(template)) {
    content = content.replace(new RegExp(`\\{{\\s*${key}\\s*}\\}`, "gi"), template[key]);
  }
  return content;
}

// src/photoModal.ts
var import_litepicker = __toESM(require_litepicker_umd());
var PhotosModal = class extends import_obsidian7.Modal {
  constructor(app2, plugin, editor, view) {
    super(app2);
    this.plugin = plugin;
    this.editor = editor;
    this.view = view;
  }
  async insertImageIntoEditor(event) {
    try {
      await this.gridView.resetGrid();
      const thumbnailImage = event.target;
      const src = thumbnailImage.baseUrl + `=w${this.plugin.settings.thumbnailWidth}-h${this.plugin.settings.thumbnailHeight}`;
      const noteFolder = this.view.file.path.split("/").slice(0, -1).join("/");
      let thumbnailFolder = noteFolder;
      let linkPath = thumbnailImage.filename;
      switch (this.plugin.settings.locationOption) {
        case "specified":
          thumbnailFolder = this.plugin.settings.locationFolder;
          linkPath = thumbnailFolder + "/" + thumbnailImage.filename;
          break;
        case "subfolder":
          thumbnailFolder = noteFolder + "/" + this.plugin.settings.locationSubfolder;
          linkPath = this.plugin.settings.locationSubfolder + "/" + thumbnailImage.filename;
          break;
      }
      thumbnailFolder = thumbnailFolder.replace(/^\/+/, "").replace(/\/+$/, "");
      linkPath = encodeURI(linkPath);
      const vault = this.view.app.vault;
      if (!await vault.adapter.exists(thumbnailFolder)) {
        await vault.createFolder(thumbnailFolder);
      }
      const imageData = await (0, import_obsidian7.requestUrl)({ url: src });
      await this.view.app.vault.adapter.writeBinary(thumbnailFolder + "/" + thumbnailImage.filename, imageData.arrayBuffer);
      const cursorPosition = this.editor.getCursor();
      const linkText = handlebarParse(this.plugin.settings.thumbnailMarkdown, {
        local_thumbnail_link: linkPath,
        google_photo_id: thumbnailImage.photoId,
        google_photo_url: thumbnailImage.productUrl,
        google_base_url: thumbnailImage.baseUrl,
        taken_date: thumbnailImage.creationTime.format()
      });
      this.editor.replaceRange(linkText, cursorPosition);
      this.editor.setCursor({ line: cursorPosition.line, ch: cursorPosition.ch + linkText.length });
    } catch (e) {
      console.log(e);
    }
    this.close();
  }
  onClose() {
    var _a;
    (_a = this.gridView) == null ? void 0 : _a.destroy();
  }
};
var DailyPhotosModal = class extends PhotosModal {
  constructor(app2, plugin, editor, view) {
    super(app2, plugin, editor, view);
    this.limitPhotosToNoteDate = false;
  }
  updateDateText() {
    var _a;
    (_a = this.dateSetting) == null ? void 0 : _a.setName("Limit photos to " + this.noteDate.format("dddd, MMMM D") + " \u{1F4C5}");
  }
  async updateView() {
    if (this.limitPhotosToNoteDate) {
      this.updateDateText();
      this.gridView.setSearchParams({
        filters: {
          dateFilter: {
            dates: [{
              year: +this.noteDate.format("YYYY"),
              month: +this.noteDate.format("M"),
              day: +this.noteDate.format("D")
            }]
          }
        }
      });
    } else {
      this.gridView.clearSearchParams();
    }
    await this.gridView.resetGrid();
    this.gridView.getThumbnails().then();
  }
  async onOpen() {
    const { contentEl, modalEl } = this;
    if (import_obsidian7.Platform.isDesktop) {
      modalEl.addClass("google-photos-modal-grid");
    }
    this.gridView = new GridView({
      scrollEl: modalEl,
      plugin: this.plugin,
      onThumbnailClick: (event) => this.insertImageIntoEditor(event)
    });
    this.noteDate = (0, import_obsidian7.moment)(this.view.file.basename, this.plugin.settings.parseNoteTitle, true);
    if (this.noteDate.isValid()) {
      if (this.plugin.settings.defaultToDailyPhotos) {
        this.limitPhotosToNoteDate = true;
      }
    } else {
      this.noteDate = (0, import_obsidian7.moment)();
    }
    const datePicker = new import_litepicker.default({
      element: document.createElement("div"),
      startDate: this.noteDate.format("YYYY-MM-DD")
    });
    datePicker.on("selected", (date) => {
      this.noteDate = (0, import_obsidian7.moment)(date.format("YYYY-MM-DD"));
      this.dateToggle.setValue(true);
    });
    new import_obsidian7.Setting(contentEl).setClass("google-photos-fit-content").addToggle((toggle) => {
      this.dateToggle = toggle;
      toggle.setValue(this.limitPhotosToNoteDate).onChange((checked) => {
        this.limitPhotosToNoteDate = checked;
        this.updateView();
      });
    }).then((setting) => {
      this.dateSetting = setting;
      this.updateDateText();
      setting.nameEl.onclick = () => {
        datePicker.show(setting.nameEl);
      };
    });
    contentEl.appendChild(this.gridView.containerEl);
    await this.updateView();
  }
};

// src/main.ts
var GooglePhotos = class extends import_obsidian8.Plugin {
  async onload() {
    await this.loadSettings();
    this.photosApi = new PhotosApi(this);
    this.oauth = new OAuth(this);
    this.addSettingTab(new GooglePhotosSettingTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("photos", (source, el) => {
      const grid = new GridView({ plugin: this });
      el.appendChild(grid.containerEl);
      grid.containerEl.addClass("google-photos-codeblock");
      try {
        if (source.trim())
          grid.setSearchParams(JSON.parse(source));
      } catch (e) {
      }
      grid.getThumbnails();
    });
    this.addCommand({
      id: "insert-google-photo",
      name: "Insert Google Photo",
      editorCallback: (editor, view) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
        if (markdownView) {
          new DailyPhotosModal(this.app, this, editor, view).open();
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*!
 * 
 * litepicker.umd.js
 * Litepicker v2.0.12 (https://github.com/wakirin/Litepicker)
 * Package: litepicker (https://www.npmjs.com/package/litepicker)
 * License: MIT (https://github.com/wakirin/Litepicker/blob/master/LICENCE.md)
 * Copyright 2019-2021 Rinat G.
 *     
 * Hash: 504eef9c08cb42543660
 * 
 */
